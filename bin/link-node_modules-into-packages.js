4// This script is a hack: Since dependant packages in lively.modules often map to
// node_modules in their own folder but node_modules for nested installs aren't
// always located inside the packages node_modules folder (but sometimes up the
// dir tree), we traverse the package tree and link missing dependencies to where
// they are expected (local to the project that requires them)

var x = require("child_process").execSync;
var fs = require("fs");
var path = require("path");
var j = path.join

var ignore = [
  ".bin", "babel-preset-es2015-rollup", "rollup-plugin-babel", "rollup", "recast",
  'repeating',
  'private',
  'minimatch',
  'path-is-absolute',
  'mkdirp',
  'once',
  'esprima-fb',
  'glob',
  'lodash',
  'regenerate',
  'minimist',
  'jsesc' 
  ];

function recursivelyLinkMissingModules(dir, knownPackages) {
  // copy so that only dependent modules get to know their uppers
  knownPackages = Object.assign({}, knownPackages);
  var subDirs = linkMissingModules(dir, knownPackages);
  subDirs
    .filter(ea => !fs.lstatSync(ea).isSymbolicLink())
    .map(ea => {
      console.log(ea)
      return ea
    })
    .forEach(ea =>
    console.log(`from ${dir} to ${ea}`)||
      recursivelyLinkMissingModules(ea, knownPackages));
}

function linkMissingModules(dir, knownPackages) {
  var confFile = j(dir, "package.json"),
      node_modulesDir = j(dir, "node_modules");
  
  if (!fs.existsSync(confFile) || !fs.existsSync(node_modulesDir)) return [];

  var conf = JSON.parse(fs.readFileSync(confFile)),
      node_modulesPackages = fs.readdirSync(node_modulesDir).filter(ea => ignore.indexOf(ea) === -1),
      missing = Object.keys(conf.dependencies || {}).concat(Object.keys(conf.devDependencies || {}))
        .filter(ea => node_modulesPackages.indexOf(ea) === -1)
  // add those that are installed to knownPackages
  node_modulesPackages
    .filter(ea => Object.keys(knownPackages).indexOf(ea) === -1)
    .forEach(ea => knownPackages[ea] = j(node_modulesDir, ea))
  
  missing.forEach(ea => {
    var existing = knownPackages[ea],
        to = j(node_modulesDir, ea);
    if (!existing) return ;
    // if (!existing) return console.warn(`Cannot find dependency ${ea} for package in ${dir}`);
    console.log(`Linking ${existing} to ${to}`);
    x(`ln -sf ${existing} ${to}`);
  });
  
  return node_modulesPackages.map(ea => j(node_modulesDir, ea))
}

module.exports = recursivelyLinkMissingModules;
