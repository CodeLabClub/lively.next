(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.kldIntersections=f()}})(function(){var define,module,exports;return function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}({1:[function(require,module,exports){exports.Intersection=require("./lib/Intersection");exports.IntersectionArgs=require("./lib/IntersectionArgs");exports.Shapes=require("./lib/Shapes");exports.AffineShapes=require("./lib/AffineShapes");exports.IntersectionQuery=require("./lib/IntersectionQuery");exports.Point2D=require("kld-affine").Point2D;exports.Vector2D=require("kld-affine").Vector2D;exports.Matrix2D=require("kld-affine").Matrix2D},{"./lib/AffineShapes":2,"./lib/Intersection":3,"./lib/IntersectionArgs":4,"./lib/IntersectionQuery":5,"./lib/Shapes":6,"kld-affine":7}],2:[function(require,module,exports){if(typeof module!=="undefined"){var Point2D=require("kld-affine").Point2D,IntersectionArgs=require("./IntersectionArgs")}var AffineShapes={};AffineShapes.quadraticBezier=function(p1,p2,p3){return new IntersectionArgs("Bezier2",[p1,p2,p3])};AffineShapes.cubicBezier=function(p1,p2,p3,p4){return new IntersectionArgs("Bezier3",[p1,p2,p3,p4])};AffineShapes.circle=function(center,radius){return new IntersectionArgs("Circle",[center,radius])};AffineShapes.ellipse=function(center,radiusX,radiusY){return new IntersectionArgs("Ellipse",[center,radiusX,radiusY])};AffineShapes.line=function(p1,p2){return new IntersectionArgs("Line",[p1,p2])};AffineShapes.path=function(segments){return new IntersectionArgs("Path",[segments])};AffineShapes.polygon=function(points){return new IntersectionArgs("Polygon",[points])};AffineShapes.polyline=function(points){return new IntersectionArgs("Polyline",[points])};AffineShapes.rectangle=function(topLeft,size){return new IntersectionArgs("Rectangle",[topLeft,topLeft.add(size)])};if(typeof module!=="undefined"){module.exports=AffineShapes}},{"./IntersectionArgs":4,"kld-affine":7}],3:[function(require,module,exports){if(typeof module!=="undefined"){var Point2D=require("kld-affine").Point2D,Vector2D=require("kld-affine").Vector2D,Polynomial=require("kld-polynomial").Polynomial}function closePolygon(points){var copy=points.slice();copy.push(points[0]);return copy}function Intersection(status){this.init(status)}Intersection.prototype.init=function(status){this.status=status;this.points=new Array};Intersection.prototype.appendPoint=function(point){this.points.push(point)};Intersection.prototype.appendPoints=function(points){this.points=this.points.concat(points)};Intersection.intersect=function(shape1,shape2){var result;if(shape1!=null&&shape2!=null){if(shape1.name=="Path"){result=Intersection.intersectPathShape(shape1,shape2)}else if(shape2.name=="Path"){result=Intersection.intersectPathShape(shape2,shape1)}else{var method;var args;if(shape1.name<shape2.name){method="intersect"+shape1.name+shape2.name;args=shape1.args.concat(shape2.args)}else{method="intersect"+shape2.name+shape1.name;args=shape2.args.concat(shape1.args)}if(!(method in Intersection)){throw new Error("Intersection not available: "+method)}result=Intersection[method].apply(null,args)}}else{result=new Intersection("No Intersection")}return result};Intersection.intersectPathShape=function(path,shape){var result=new Intersection("No Intersection");var length=path.args.length;for(var i=0;i<length;i++){var segment=path.args[i];var inter=Intersection.intersect(segment,shape);result.appendPoints(inter.points)}if(result.points.length>0){result.status="Intersection"}return result};Intersection.intersectBezier2Bezier2=function(a1,a2,a3,b1,b2,b3){var a,b;var c12,c11,c10;var c22,c21,c20;var result=new Intersection("No Intersection");var poly;a=a2.multiply(-2);c12=a1.add(a.add(a3));a=a1.multiply(-2);b=a2.multiply(2);c11=a.add(b);c10=new Point2D(a1.x,a1.y);a=b2.multiply(-2);c22=b1.add(a.add(b3));a=b1.multiply(-2);b=b2.multiply(2);c21=a.add(b);c20=new Point2D(b1.x,b1.y);if(c12.y==0){var v0=c12.x*(c10.y-c20.y);var v1=v0-c11.x*c11.y;var v2=v0+v1;var v3=c11.y*c11.y;poly=new Polynomial(c12.x*c22.y*c22.y,2*c12.x*c21.y*c22.y,c12.x*c21.y*c21.y-c22.x*v3-c22.y*v0-c22.y*v1,-c21.x*v3-c21.y*v0-c21.y*v1,(c10.x-c20.x)*v3+(c10.y-c20.y)*v1)}else{var v0=c12.x*c22.y-c12.y*c22.x;var v1=c12.x*c21.y-c21.x*c12.y;var v2=c11.x*c12.y-c11.y*c12.x;var v3=c10.y-c20.y;var v4=c12.y*(c10.x-c20.x)-c12.x*v3;var v5=-c11.y*v2+c12.y*v4;var v6=v2*v2;poly=new Polynomial(v0*v0,2*v0*v1,(-c22.y*v6+c12.y*v1*v1+c12.y*v0*v4+v0*v5)/c12.y,(-c21.y*v6+c12.y*v1*v4+v1*v5)/c12.y,(v3*v6+v4*v5)/c12.y)}var roots=poly.getRoots();for(var i=0;i<roots.length;i++){var s=roots[i];if(0<=s&&s<=1){var xRoots=new Polynomial(c12.x,c11.x,c10.x-c20.x-s*c21.x-s*s*c22.x).getRoots();var yRoots=new Polynomial(c12.y,c11.y,c10.y-c20.y-s*c21.y-s*s*c22.y).getRoots();if(xRoots.length>0&&yRoots.length>0){var TOLERANCE=1e-4;checkRoots:for(var j=0;j<xRoots.length;j++){var xRoot=xRoots[j];if(0<=xRoot&&xRoot<=1){for(var k=0;k<yRoots.length;k++){if(Math.abs(xRoot-yRoots[k])<TOLERANCE){result.points.push(c22.multiply(s*s).add(c21.multiply(s).add(c20)));break checkRoots}}}}}}}if(result.points.length>0){result.status="Intersection"}return result};Intersection.intersectBezier2Bezier3=function(a1,a2,a3,b1,b2,b3,b4){var a,b,c,d;var c12,c11,c10;var c23,c22,c21,c20;var result=new Intersection("No Intersection");a=a2.multiply(-2);c12=a1.add(a.add(a3));a=a1.multiply(-2);b=a2.multiply(2);c11=a.add(b);c10=new Point2D(a1.x,a1.y);a=b1.multiply(-1);b=b2.multiply(3);c=b3.multiply(-3);d=a.add(b.add(c.add(b4)));c23=new Vector2D(d.x,d.y);a=b1.multiply(3);b=b2.multiply(-6);c=b3.multiply(3);d=a.add(b.add(c));c22=new Vector2D(d.x,d.y);a=b1.multiply(-3);b=b2.multiply(3);c=a.add(b);c21=new Vector2D(c.x,c.y);c20=new Vector2D(b1.x,b1.y);var c10x2=c10.x*c10.x;var c10y2=c10.y*c10.y;var c11x2=c11.x*c11.x;var c11y2=c11.y*c11.y;var c12x2=c12.x*c12.x;var c12y2=c12.y*c12.y;var c20x2=c20.x*c20.x;var c20y2=c20.y*c20.y;var c21x2=c21.x*c21.x;var c21y2=c21.y*c21.y;var c22x2=c22.x*c22.x;var c22y2=c22.y*c22.y;var c23x2=c23.x*c23.x;var c23y2=c23.y*c23.y;var poly=new Polynomial(-2*c12.x*c12.y*c23.x*c23.y+c12x2*c23y2+c12y2*c23x2,-2*c12.x*c12.y*c22.x*c23.y-2*c12.x*c12.y*c22.y*c23.x+2*c12y2*c22.x*c23.x+2*c12x2*c22.y*c23.y,-2*c12.x*c21.x*c12.y*c23.y-2*c12.x*c12.y*c21.y*c23.x-2*c12.x*c12.y*c22.x*c22.y+2*c21.x*c12y2*c23.x+c12y2*c22x2+c12x2*(2*c21.y*c23.y+c22y2),2*c10.x*c12.x*c12.y*c23.y+2*c10.y*c12.x*c12.y*c23.x+c11.x*c11.y*c12.x*c23.y+c11.x*c11.y*c12.y*c23.x-2*c20.x*c12.x*c12.y*c23.y-2*c12.x*c20.y*c12.y*c23.x-2*c12.x*c21.x*c12.y*c22.y-2*c12.x*c12.y*c21.y*c22.x-2*c10.x*c12y2*c23.x-2*c10.y*c12x2*c23.y+2*c20.x*c12y2*c23.x+2*c21.x*c12y2*c22.x-c11y2*c12.x*c23.x-c11x2*c12.y*c23.y+c12x2*(2*c20.y*c23.y+2*c21.y*c22.y),2*c10.x*c12.x*c12.y*c22.y+2*c10.y*c12.x*c12.y*c22.x+c11.x*c11.y*c12.x*c22.y+c11.x*c11.y*c12.y*c22.x-2*c20.x*c12.x*c12.y*c22.y-2*c12.x*c20.y*c12.y*c22.x-2*c12.x*c21.x*c12.y*c21.y-2*c10.x*c12y2*c22.x-2*c10.y*c12x2*c22.y+2*c20.x*c12y2*c22.x-c11y2*c12.x*c22.x-c11x2*c12.y*c22.y+c21x2*c12y2+c12x2*(2*c20.y*c22.y+c21y2),2*c10.x*c12.x*c12.y*c21.y+2*c10.y*c12.x*c21.x*c12.y+c11.x*c11.y*c12.x*c21.y+c11.x*c11.y*c21.x*c12.y-2*c20.x*c12.x*c12.y*c21.y-2*c12.x*c20.y*c21.x*c12.y-2*c10.x*c21.x*c12y2-2*c10.y*c12x2*c21.y+2*c20.x*c21.x*c12y2-c11y2*c12.x*c21.x-c11x2*c12.y*c21.y+2*c12x2*c20.y*c21.y,-2*c10.x*c10.y*c12.x*c12.y-c10.x*c11.x*c11.y*c12.y-c10.y*c11.x*c11.y*c12.x+2*c10.x*c12.x*c20.y*c12.y+2*c10.y*c20.x*c12.x*c12.y+c11.x*c20.x*c11.y*c12.y+c11.x*c11.y*c12.x*c20.y-2*c20.x*c12.x*c20.y*c12.y-2*c10.x*c20.x*c12y2+c10.x*c11y2*c12.x+c10.y*c11x2*c12.y-2*c10.y*c12x2*c20.y-c20.x*c11y2*c12.x-c11x2*c20.y*c12.y+c10x2*c12y2+c10y2*c12x2+c20x2*c12y2+c12x2*c20y2);var roots=poly.getRootsInInterval(0,1);for(var i=0;i<roots.length;i++){var s=roots[i];var xRoots=new Polynomial(c12.x,c11.x,c10.x-c20.x-s*c21.x-s*s*c22.x-s*s*s*c23.x).getRoots();var yRoots=new Polynomial(c12.y,c11.y,c10.y-c20.y-s*c21.y-s*s*c22.y-s*s*s*c23.y).getRoots();if(xRoots.length>0&&yRoots.length>0){var TOLERANCE=1e-4;checkRoots:for(var j=0;j<xRoots.length;j++){var xRoot=xRoots[j];if(0<=xRoot&&xRoot<=1){for(var k=0;k<yRoots.length;k++){if(Math.abs(xRoot-yRoots[k])<TOLERANCE){result.points.push(c23.multiply(s*s*s).add(c22.multiply(s*s).add(c21.multiply(s).add(c20))));break checkRoots}}}}}}if(result.points.length>0){result.status="Intersection"}return result};Intersection.intersectBezier2Circle=function(p1,p2,p3,c,r){return Intersection.intersectBezier2Ellipse(p1,p2,p3,c,r,r)};Intersection.intersectBezier2Ellipse=function(p1,p2,p3,ec,rx,ry){var a,b;var c2,c1,c0;var result=new Intersection("No Intersection");a=p2.multiply(-2);c2=p1.add(a.add(p3));a=p1.multiply(-2);b=p2.multiply(2);c1=a.add(b);c0=new Point2D(p1.x,p1.y);var rxrx=rx*rx;var ryry=ry*ry;var roots=new Polynomial(ryry*c2.x*c2.x+rxrx*c2.y*c2.y,2*(ryry*c2.x*c1.x+rxrx*c2.y*c1.y),ryry*(2*c2.x*c0.x+c1.x*c1.x)+rxrx*(2*c2.y*c0.y+c1.y*c1.y)-2*(ryry*ec.x*c2.x+rxrx*ec.y*c2.y),2*(ryry*c1.x*(c0.x-ec.x)+rxrx*c1.y*(c0.y-ec.y)),ryry*(c0.x*c0.x+ec.x*ec.x)+rxrx*(c0.y*c0.y+ec.y*ec.y)-2*(ryry*ec.x*c0.x+rxrx*ec.y*c0.y)-rxrx*ryry).getRoots();for(var i=0;i<roots.length;i++){var t=roots[i];if(0<=t&&t<=1){result.points.push(c2.multiply(t*t).add(c1.multiply(t).add(c0)))}}if(result.points.length>0){result.status="Intersection"}return result};Intersection.intersectBezier2Line=function(p1,p2,p3,a1,a2){var a,b;var c2,c1,c0;var cl;var n;var min=a1.min(a2);var max=a1.max(a2);var result=new Intersection("No Intersection");a=p2.multiply(-2);c2=p1.add(a.add(p3));a=p1.multiply(-2);b=p2.multiply(2);c1=a.add(b);c0=new Point2D(p1.x,p1.y);n=new Vector2D(a1.y-a2.y,a2.x-a1.x);cl=a1.x*a2.y-a2.x*a1.y;roots=new Polynomial(n.dot(c2),n.dot(c1),n.dot(c0)+cl).getRoots();for(var i=0;i<roots.length;i++){var t=roots[i];if(0<=t&&t<=1){var p4=p1.lerp(p2,t);var p5=p2.lerp(p3,t);var p6=p4.lerp(p5,t);if(a1.x==a2.x){if(min.y<=p6.y&&p6.y<=max.y){result.status="Intersection";result.appendPoint(p6)}}else if(a1.y==a2.y){if(min.x<=p6.x&&p6.x<=max.x){result.status="Intersection";result.appendPoint(p6)}}else if(min.x<=p6.x&&p6.x<=max.x&&min.y<=p6.y&&p6.y<=max.y){result.status="Intersection";result.appendPoint(p6)}}}return result};Intersection.intersectBezier2Polygon=function(p1,p2,p3,points){return this.intersectBezier2Polyline(p1,p2,p3,closePolygon(points))};Intersection.intersectBezier2Polyline=function(p1,p2,p3,points){var result=new Intersection("No Intersection");var length=points.length;for(var i=0;i<length-1;i++){var a1=points[i];var a2=points[i+1];var inter=Intersection.intersectBezier2Line(p1,p2,p3,a1,a2);result.appendPoints(inter.points)}if(result.points.length>0){result.status="Intersection"}return result};Intersection.intersectBezier2Rectangle=function(p1,p2,p3,r1,r2){var min=r1.min(r2);var max=r1.max(r2);var topRight=new Point2D(max.x,min.y);var bottomLeft=new Point2D(min.x,max.y);var inter1=Intersection.intersectBezier2Line(p1,p2,p3,min,topRight);var inter2=Intersection.intersectBezier2Line(p1,p2,p3,topRight,max);var inter3=Intersection.intersectBezier2Line(p1,p2,p3,max,bottomLeft);var inter4=Intersection.intersectBezier2Line(p1,p2,p3,bottomLeft,min);var result=new Intersection("No Intersection");result.appendPoints(inter1.points);result.appendPoints(inter2.points);result.appendPoints(inter3.points);result.appendPoints(inter4.points);if(result.points.length>0){result.status="Intersection"}return result};Intersection.intersectBezier3Bezier3=function(a1,a2,a3,a4,b1,b2,b3,b4){var a,b,c,d;var c13,c12,c11,c10;var c23,c22,c21,c20;var result=new Intersection("No Intersection");a=a1.multiply(-1);b=a2.multiply(3);c=a3.multiply(-3);d=a.add(b.add(c.add(a4)));c13=new Vector2D(d.x,d.y);a=a1.multiply(3);b=a2.multiply(-6);c=a3.multiply(3);d=a.add(b.add(c));c12=new Vector2D(d.x,d.y);a=a1.multiply(-3);b=a2.multiply(3);c=a.add(b);c11=new Vector2D(c.x,c.y);c10=new Vector2D(a1.x,a1.y);a=b1.multiply(-1);b=b2.multiply(3);c=b3.multiply(-3);d=a.add(b.add(c.add(b4)));c23=new Vector2D(d.x,d.y);a=b1.multiply(3);b=b2.multiply(-6);c=b3.multiply(3);d=a.add(b.add(c));c22=new Vector2D(d.x,d.y);a=b1.multiply(-3);b=b2.multiply(3);c=a.add(b);c21=new Vector2D(c.x,c.y);c20=new Vector2D(b1.x,b1.y);var c10x2=c10.x*c10.x;var c10x3=c10.x*c10.x*c10.x;var c10y2=c10.y*c10.y;var c10y3=c10.y*c10.y*c10.y;var c11x2=c11.x*c11.x;var c11x3=c11.x*c11.x*c11.x;var c11y2=c11.y*c11.y;var c11y3=c11.y*c11.y*c11.y;var c12x2=c12.x*c12.x;var c12x3=c12.x*c12.x*c12.x;var c12y2=c12.y*c12.y;var c12y3=c12.y*c12.y*c12.y;var c13x2=c13.x*c13.x;var c13x3=c13.x*c13.x*c13.x;var c13y2=c13.y*c13.y;var c13y3=c13.y*c13.y*c13.y;var c20x2=c20.x*c20.x;var c20x3=c20.x*c20.x*c20.x;var c20y2=c20.y*c20.y;var c20y3=c20.y*c20.y*c20.y;var c21x2=c21.x*c21.x;var c21x3=c21.x*c21.x*c21.x;var c21y2=c21.y*c21.y;var c22x2=c22.x*c22.x;var c22x3=c22.x*c22.x*c22.x;var c22y2=c22.y*c22.y;var c23x2=c23.x*c23.x;var c23x3=c23.x*c23.x*c23.x;var c23y2=c23.y*c23.y;var c23y3=c23.y*c23.y*c23.y;var poly=new Polynomial(-c13x3*c23y3+c13y3*c23x3-3*c13.x*c13y2*c23x2*c23.y+3*c13x2*c13.y*c23.x*c23y2,-6*c13.x*c22.x*c13y2*c23.x*c23.y+6*c13x2*c13.y*c22.y*c23.x*c23.y+3*c22.x*c13y3*c23x2-3*c13x3*c22.y*c23y2-3*c13.x*c13y2*c22.y*c23x2+3*c13x2*c22.x*c13.y*c23y2,-6*c21.x*c13.x*c13y2*c23.x*c23.y-6*c13.x*c22.x*c13y2*c22.y*c23.x+6*c13x2*c22.x*c13.y*c22.y*c23.y+3*c21.x*c13y3*c23x2+3*c22x2*c13y3*c23.x+3*c21.x*c13x2*c13.y*c23y2-3*c13.x*c21.y*c13y2*c23x2-3*c13.x*c22x2*c13y2*c23.y+c13x2*c13.y*c23.x*(6*c21.y*c23.y+3*c22y2)+c13x3*(-c21.y*c23y2-2*c22y2*c23.y-c23.y*(2*c21.y*c23.y+c22y2)),c11.x*c12.y*c13.x*c13.y*c23.x*c23.y-c11.y*c12.x*c13.x*c13.y*c23.x*c23.y+6*c21.x*c22.x*c13y3*c23.x+3*c11.x*c12.x*c13.x*c13.y*c23y2+6*c10.x*c13.x*c13y2*c23.x*c23.y-3*c11.x*c12.x*c13y2*c23.x*c23.y-3*c11.y*c12.y*c13.x*c13.y*c23x2-6*c10.y*c13x2*c13.y*c23.x*c23.y-6*c20.x*c13.x*c13y2*c23.x*c23.y+3*c11.y*c12.y*c13x2*c23.x*c23.y-2*c12.x*c12y2*c13.x*c23.x*c23.y-6*c21.x*c13.x*c22.x*c13y2*c23.y-6*c21.x*c13.x*c13y2*c22.y*c23.x-6*c13.x*c21.y*c22.x*c13y2*c23.x+6*c21.x*c13x2*c13.y*c22.y*c23.y+2*c12x2*c12.y*c13.y*c23.x*c23.y+c22x3*c13y3-3*c10.x*c13y3*c23x2+3*c10.y*c13x3*c23y2+3*c20.x*c13y3*c23x2+c12y3*c13.x*c23x2-c12x3*c13.y*c23y2-3*c10.x*c13x2*c13.y*c23y2+3*c10.y*c13.x*c13y2*c23x2-2*c11.x*c12.y*c13x2*c23y2+c11.x*c12.y*c13y2*c23x2-c11.y*c12.x*c13x2*c23y2+2*c11.y*c12.x*c13y2*c23x2+3*c20.x*c13x2*c13.y*c23y2-c12.x*c12y2*c13.y*c23x2-3*c20.y*c13.x*c13y2*c23x2+c12x2*c12.y*c13.x*c23y2-3*c13.x*c22x2*c13y2*c22.y+c13x2*c13.y*c23.x*(6*c20.y*c23.y+6*c21.y*c22.y)+c13x2*c22.x*c13.y*(6*c21.y*c23.y+3*c22y2)+c13x3*(-2*c21.y*c22.y*c23.y-c20.y*c23y2-c22.y*(2*c21.y*c23.y+c22y2)-c23.y*(2*c20.y*c23.y+2*c21.y*c22.y)),6*c11.x*c12.x*c13.x*c13.y*c22.y*c23.y+c11.x*c12.y*c13.x*c22.x*c13.y*c23.y+c11.x*c12.y*c13.x*c13.y*c22.y*c23.x-c11.y*c12.x*c13.x*c22.x*c13.y*c23.y-c11.y*c12.x*c13.x*c13.y*c22.y*c23.x-6*c11.y*c12.y*c13.x*c22.x*c13.y*c23.x-6*c10.x*c22.x*c13y3*c23.x+6*c20.x*c22.x*c13y3*c23.x+6*c10.y*c13x3*c22.y*c23.y+2*c12y3*c13.x*c22.x*c23.x-2*c12x3*c13.y*c22.y*c23.y+6*c10.x*c13.x*c22.x*c13y2*c23.y+6*c10.x*c13.x*c13y2*c22.y*c23.x+6*c10.y*c13.x*c22.x*c13y2*c23.x-3*c11.x*c12.x*c22.x*c13y2*c23.y-3*c11.x*c12.x*c13y2*c22.y*c23.x+2*c11.x*c12.y*c22.x*c13y2*c23.x+4*c11.y*c12.x*c22.x*c13y2*c23.x-6*c10.x*c13x2*c13.y*c22.y*c23.y-6*c10.y*c13x2*c22.x*c13.y*c23.y-6*c10.y*c13x2*c13.y*c22.y*c23.x-4*c11.x*c12.y*c13x2*c22.y*c23.y-6*c20.x*c13.x*c22.x*c13y2*c23.y-6*c20.x*c13.x*c13y2*c22.y*c23.x-2*c11.y*c12.x*c13x2*c22.y*c23.y+3*c11.y*c12.y*c13x2*c22.x*c23.y+3*c11.y*c12.y*c13x2*c22.y*c23.x-2*c12.x*c12y2*c13.x*c22.x*c23.y-2*c12.x*c12y2*c13.x*c22.y*c23.x-2*c12.x*c12y2*c22.x*c13.y*c23.x-6*c20.y*c13.x*c22.x*c13y2*c23.x-6*c21.x*c13.x*c21.y*c13y2*c23.x-6*c21.x*c13.x*c22.x*c13y2*c22.y+6*c20.x*c13x2*c13.y*c22.y*c23.y+2*c12x2*c12.y*c13.x*c22.y*c23.y+2*c12x2*c12.y*c22.x*c13.y*c23.y+2*c12x2*c12.y*c13.y*c22.y*c23.x+3*c21.x*c22x2*c13y3+3*c21x2*c13y3*c23.x-3*c13.x*c21.y*c22x2*c13y2-3*c21x2*c13.x*c13y2*c23.y+c13x2*c22.x*c13.y*(6*c20.y*c23.y+6*c21.y*c22.y)+c13x2*c13.y*c23.x*(6*c20.y*c22.y+3*c21y2)+c21.x*c13x2*c13.y*(6*c21.y*c23.y+3*c22y2)+c13x3*(-2*c20.y*c22.y*c23.y-c23.y*(2*c20.y*c22.y+c21y2)-c21.y*(2*c21.y*c23.y+c22y2)-c22.y*(2*c20.y*c23.y+2*c21.y*c22.y)),c11.x*c21.x*c12.y*c13.x*c13.y*c23.y+c11.x*c12.y*c13.x*c21.y*c13.y*c23.x+c11.x*c12.y*c13.x*c22.x*c13.y*c22.y-c11.y*c12.x*c21.x*c13.x*c13.y*c23.y-c11.y*c12.x*c13.x*c21.y*c13.y*c23.x-c11.y*c12.x*c13.x*c22.x*c13.y*c22.y-6*c11.y*c21.x*c12.y*c13.x*c13.y*c23.x-6*c10.x*c21.x*c13y3*c23.x+6*c20.x*c21.x*c13y3*c23.x+2*c21.x*c12y3*c13.x*c23.x+6*c10.x*c21.x*c13.x*c13y2*c23.y+6*c10.x*c13.x*c21.y*c13y2*c23.x+6*c10.x*c13.x*c22.x*c13y2*c22.y+6*c10.y*c21.x*c13.x*c13y2*c23.x-3*c11.x*c12.x*c21.x*c13y2*c23.y-3*c11.x*c12.x*c21.y*c13y2*c23.x-3*c11.x*c12.x*c22.x*c13y2*c22.y+2*c11.x*c21.x*c12.y*c13y2*c23.x+4*c11.y*c12.x*c21.x*c13y2*c23.x-6*c10.y*c21.x*c13x2*c13.y*c23.y-6*c10.y*c13x2*c21.y*c13.y*c23.x-6*c10.y*c13x2*c22.x*c13.y*c22.y-6*c20.x*c21.x*c13.x*c13y2*c23.y-6*c20.x*c13.x*c21.y*c13y2*c23.x-6*c20.x*c13.x*c22.x*c13y2*c22.y+3*c11.y*c21.x*c12.y*c13x2*c23.y-3*c11.y*c12.y*c13.x*c22x2*c13.y+3*c11.y*c12.y*c13x2*c21.y*c23.x+3*c11.y*c12.y*c13x2*c22.x*c22.y-2*c12.x*c21.x*c12y2*c13.x*c23.y-2*c12.x*c21.x*c12y2*c13.y*c23.x-2*c12.x*c12y2*c13.x*c21.y*c23.x-2*c12.x*c12y2*c13.x*c22.x*c22.y-6*c20.y*c21.x*c13.x*c13y2*c23.x-6*c21.x*c13.x*c21.y*c22.x*c13y2+6*c20.y*c13x2*c21.y*c13.y*c23.x+2*c12x2*c21.x*c12.y*c13.y*c23.y+2*c12x2*c12.y*c21.y*c13.y*c23.x+2*c12x2*c12.y*c22.x*c13.y*c22.y-3*c10.x*c22x2*c13y3+3*c20.x*c22x2*c13y3+3*c21x2*c22.x*c13y3+c12y3*c13.x*c22x2+3*c10.y*c13.x*c22x2*c13y2+c11.x*c12.y*c22x2*c13y2+2*c11.y*c12.x*c22x2*c13y2-c12.x*c12y2*c22x2*c13.y-3*c20.y*c13.x*c22x2*c13y2-3*c21x2*c13.x*c13y2*c22.y+c12x2*c12.y*c13.x*(2*c21.y*c23.y+c22y2)+c11.x*c12.x*c13.x*c13.y*(6*c21.y*c23.y+3*c22y2)+c21.x*c13x2*c13.y*(6*c20.y*c23.y+6*c21.y*c22.y)+c12x3*c13.y*(-2*c21.y*c23.y-c22y2)+c10.y*c13x3*(6*c21.y*c23.y+3*c22y2)+c11.y*c12.x*c13x2*(-2*c21.y*c23.y-c22y2)+c11.x*c12.y*c13x2*(-4*c21.y*c23.y-2*c22y2)+c10.x*c13x2*c13.y*(-6*c21.y*c23.y-3*c22y2)+c13x2*c22.x*c13.y*(6*c20.y*c22.y+3*c21y2)+c20.x*c13x2*c13.y*(6*c21.y*c23.y+3*c22y2)+c13x3*(-2*c20.y*c21.y*c23.y-c22.y*(2*c20.y*c22.y+c21y2)-c20.y*(2*c21.y*c23.y+c22y2)-c21.y*(2*c20.y*c23.y+2*c21.y*c22.y)),-c10.x*c11.x*c12.y*c13.x*c13.y*c23.y+c10.x*c11.y*c12.x*c13.x*c13.y*c23.y+6*c10.x*c11.y*c12.y*c13.x*c13.y*c23.x-6*c10.y*c11.x*c12.x*c13.x*c13.y*c23.y-c10.y*c11.x*c12.y*c13.x*c13.y*c23.x+c10.y*c11.y*c12.x*c13.x*c13.y*c23.x+c11.x*c11.y*c12.x*c12.y*c13.x*c23.y-c11.x*c11.y*c12.x*c12.y*c13.y*c23.x+c11.x*c20.x*c12.y*c13.x*c13.y*c23.y+c11.x*c20.y*c12.y*c13.x*c13.y*c23.x+c11.x*c21.x*c12.y*c13.x*c13.y*c22.y+c11.x*c12.y*c13.x*c21.y*c22.x*c13.y-c20.x*c11.y*c12.x*c13.x*c13.y*c23.y-6*c20.x*c11.y*c12.y*c13.x*c13.y*c23.x-c11.y*c12.x*c20.y*c13.x*c13.y*c23.x-c11.y*c12.x*c21.x*c13.x*c13.y*c22.y-c11.y*c12.x*c13.x*c21.y*c22.x*c13.y-6*c11.y*c21.x*c12.y*c13.x*c22.x*c13.y-6*c10.x*c20.x*c13y3*c23.x-6*c10.x*c21.x*c22.x*c13y3-2*c10.x*c12y3*c13.x*c23.x+6*c20.x*c21.x*c22.x*c13y3+2*c20.x*c12y3*c13.x*c23.x+2*c21.x*c12y3*c13.x*c22.x+2*c10.y*c12x3*c13.y*c23.y-6*c10.x*c10.y*c13.x*c13y2*c23.x+3*c10.x*c11.x*c12.x*c13y2*c23.y-2*c10.x*c11.x*c12.y*c13y2*c23.x-4*c10.x*c11.y*c12.x*c13y2*c23.x+3*c10.y*c11.x*c12.x*c13y2*c23.x+6*c10.x*c10.y*c13x2*c13.y*c23.y+6*c10.x*c20.x*c13.x*c13y2*c23.y-3*c10.x*c11.y*c12.y*c13x2*c23.y+2*c10.x*c12.x*c12y2*c13.x*c23.y+2*c10.x*c12.x*c12y2*c13.y*c23.x+6*c10.x*c20.y*c13.x*c13y2*c23.x+6*c10.x*c21.x*c13.x*c13y2*c22.y+6*c10.x*c13.x*c21.y*c22.x*c13y2+4*c10.y*c11.x*c12.y*c13x2*c23.y+6*c10.y*c20.x*c13.x*c13y2*c23.x+2*c10.y*c11.y*c12.x*c13x2*c23.y-3*c10.y*c11.y*c12.y*c13x2*c23.x+2*c10.y*c12.x*c12y2*c13.x*c23.x+6*c10.y*c21.x*c13.x*c22.x*c13y2-3*c11.x*c20.x*c12.x*c13y2*c23.y+2*c11.x*c20.x*c12.y*c13y2*c23.x+c11.x*c11.y*c12y2*c13.x*c23.x-3*c11.x*c12.x*c20.y*c13y2*c23.x-3*c11.x*c12.x*c21.x*c13y2*c22.y-3*c11.x*c12.x*c21.y*c22.x*c13y2+2*c11.x*c21.x*c12.y*c22.x*c13y2+4*c20.x*c11.y*c12.x*c13y2*c23.x+4*c11.y*c12.x*c21.x*c22.x*c13y2-2*c10.x*c12x2*c12.y*c13.y*c23.y-6*c10.y*c20.x*c13x2*c13.y*c23.y-6*c10.y*c20.y*c13x2*c13.y*c23.x-6*c10.y*c21.x*c13x2*c13.y*c22.y-2*c10.y*c12x2*c12.y*c13.x*c23.y-2*c10.y*c12x2*c12.y*c13.y*c23.x-6*c10.y*c13x2*c21.y*c22.x*c13.y-c11.x*c11.y*c12x2*c13.y*c23.y-2*c11.x*c11y2*c13.x*c13.y*c23.x+3*c20.x*c11.y*c12.y*c13x2*c23.y-2*c20.x*c12.x*c12y2*c13.x*c23.y-2*c20.x*c12.x*c12y2*c13.y*c23.x-6*c20.x*c20.y*c13.x*c13y2*c23.x-6*c20.x*c21.x*c13.x*c13y2*c22.y-6*c20.x*c13.x*c21.y*c22.x*c13y2+3*c11.y*c20.y*c12.y*c13x2*c23.x+3*c11.y*c21.x*c12.y*c13x2*c22.y+3*c11.y*c12.y*c13x2*c21.y*c22.x-2*c12.x*c20.y*c12y2*c13.x*c23.x-2*c12.x*c21.x*c12y2*c13.x*c22.y-2*c12.x*c21.x*c12y2*c22.x*c13.y-2*c12.x*c12y2*c13.x*c21.y*c22.x-6*c20.y*c21.x*c13.x*c22.x*c13y2-c11y2*c12.x*c12.y*c13.x*c23.x+2*c20.x*c12x2*c12.y*c13.y*c23.y+6*c20.y*c13x2*c21.y*c22.x*c13.y+2*c11x2*c11.y*c13.x*c13.y*c23.y+c11x2*c12.x*c12.y*c13.y*c23.y+2*c12x2*c20.y*c12.y*c13.y*c23.x+2*c12x2*c21.x*c12.y*c13.y*c22.y+2*c12x2*c12.y*c21.y*c22.x*c13.y+c21x3*c13y3+3*c10x2*c13y3*c23.x-3*c10y2*c13x3*c23.y+3*c20x2*c13y3*c23.x+c11y3*c13x2*c23.x-c11x3*c13y2*c23.y-c11.x*c11y2*c13x2*c23.y+c11x2*c11.y*c13y2*c23.x-3*c10x2*c13.x*c13y2*c23.y+3*c10y2*c13x2*c13.y*c23.x-c11x2*c12y2*c13.x*c23.y+c11y2*c12x2*c13.y*c23.x-3*c21x2*c13.x*c21.y*c13y2-3*c20x2*c13.x*c13y2*c23.y+3*c20y2*c13x2*c13.y*c23.x+c11.x*c12.x*c13.x*c13.y*(6*c20.y*c23.y+6*c21.y*c22.y)+c12x3*c13.y*(-2*c20.y*c23.y-2*c21.y*c22.y)+c10.y*c13x3*(6*c20.y*c23.y+6*c21.y*c22.y)+c11.y*c12.x*c13x2*(-2*c20.y*c23.y-2*c21.y*c22.y)+c12x2*c12.y*c13.x*(2*c20.y*c23.y+2*c21.y*c22.y)+c11.x*c12.y*c13x2*(-4*c20.y*c23.y-4*c21.y*c22.y)+c10.x*c13x2*c13.y*(-6*c20.y*c23.y-6*c21.y*c22.y)+c20.x*c13x2*c13.y*(6*c20.y*c23.y+6*c21.y*c22.y)+c21.x*c13x2*c13.y*(6*c20.y*c22.y+3*c21y2)+c13x3*(-2*c20.y*c21.y*c22.y-c20y2*c23.y-c21.y*(2*c20.y*c22.y+c21y2)-c20.y*(2*c20.y*c23.y+2*c21.y*c22.y)),-c10.x*c11.x*c12.y*c13.x*c13.y*c22.y+c10.x*c11.y*c12.x*c13.x*c13.y*c22.y+6*c10.x*c11.y*c12.y*c13.x*c22.x*c13.y-6*c10.y*c11.x*c12.x*c13.x*c13.y*c22.y-c10.y*c11.x*c12.y*c13.x*c22.x*c13.y+c10.y*c11.y*c12.x*c13.x*c22.x*c13.y+c11.x*c11.y*c12.x*c12.y*c13.x*c22.y-c11.x*c11.y*c12.x*c12.y*c22.x*c13.y+c11.x*c20.x*c12.y*c13.x*c13.y*c22.y+c11.x*c20.y*c12.y*c13.x*c22.x*c13.y+c11.x*c21.x*c12.y*c13.x*c21.y*c13.y-c20.x*c11.y*c12.x*c13.x*c13.y*c22.y-6*c20.x*c11.y*c12.y*c13.x*c22.x*c13.y-c11.y*c12.x*c20.y*c13.x*c22.x*c13.y-c11.y*c12.x*c21.x*c13.x*c21.y*c13.y-6*c10.x*c20.x*c22.x*c13y3-2*c10.x*c12y3*c13.x*c22.x+2*c20.x*c12y3*c13.x*c22.x+2*c10.y*c12x3*c13.y*c22.y-6*c10.x*c10.y*c13.x*c22.x*c13y2+3*c10.x*c11.x*c12.x*c13y2*c22.y-2*c10.x*c11.x*c12.y*c22.x*c13y2-4*c10.x*c11.y*c12.x*c22.x*c13y2+3*c10.y*c11.x*c12.x*c22.x*c13y2+6*c10.x*c10.y*c13x2*c13.y*c22.y+6*c10.x*c20.x*c13.x*c13y2*c22.y-3*c10.x*c11.y*c12.y*c13x2*c22.y+2*c10.x*c12.x*c12y2*c13.x*c22.y+2*c10.x*c12.x*c12y2*c22.x*c13.y+6*c10.x*c20.y*c13.x*c22.x*c13y2+6*c10.x*c21.x*c13.x*c21.y*c13y2+4*c10.y*c11.x*c12.y*c13x2*c22.y+6*c10.y*c20.x*c13.x*c22.x*c13y2+2*c10.y*c11.y*c12.x*c13x2*c22.y-3*c10.y*c11.y*c12.y*c13x2*c22.x+2*c10.y*c12.x*c12y2*c13.x*c22.x-3*c11.x*c20.x*c12.x*c13y2*c22.y+2*c11.x*c20.x*c12.y*c22.x*c13y2+c11.x*c11.y*c12y2*c13.x*c22.x-3*c11.x*c12.x*c20.y*c22.x*c13y2-3*c11.x*c12.x*c21.x*c21.y*c13y2+4*c20.x*c11.y*c12.x*c22.x*c13y2-2*c10.x*c12x2*c12.y*c13.y*c22.y-6*c10.y*c20.x*c13x2*c13.y*c22.y-6*c10.y*c20.y*c13x2*c22.x*c13.y-6*c10.y*c21.x*c13x2*c21.y*c13.y-2*c10.y*c12x2*c12.y*c13.x*c22.y-2*c10.y*c12x2*c12.y*c22.x*c13.y-c11.x*c11.y*c12x2*c13.y*c22.y-2*c11.x*c11y2*c13.x*c22.x*c13.y+3*c20.x*c11.y*c12.y*c13x2*c22.y-2*c20.x*c12.x*c12y2*c13.x*c22.y-2*c20.x*c12.x*c12y2*c22.x*c13.y-6*c20.x*c20.y*c13.x*c22.x*c13y2-6*c20.x*c21.x*c13.x*c21.y*c13y2+3*c11.y*c20.y*c12.y*c13x2*c22.x+3*c11.y*c21.x*c12.y*c13x2*c21.y-2*c12.x*c20.y*c12y2*c13.x*c22.x-2*c12.x*c21.x*c12y2*c13.x*c21.y-c11y2*c12.x*c12.y*c13.x*c22.x+2*c20.x*c12x2*c12.y*c13.y*c22.y-3*c11.y*c21x2*c12.y*c13.x*c13.y+6*c20.y*c21.x*c13x2*c21.y*c13.y+2*c11x2*c11.y*c13.x*c13.y*c22.y+c11x2*c12.x*c12.y*c13.y*c22.y+2*c12x2*c20.y*c12.y*c22.x*c13.y+2*c12x2*c21.x*c12.y*c21.y*c13.y-3*c10.x*c21x2*c13y3+3*c20.x*c21x2*c13y3+3*c10x2*c22.x*c13y3-3*c10y2*c13x3*c22.y+3*c20x2*c22.x*c13y3+c21x2*c12y3*c13.x+c11y3*c13x2*c22.x-c11x3*c13y2*c22.y+3*c10.y*c21x2*c13.x*c13y2-c11.x*c11y2*c13x2*c22.y+c11.x*c21x2*c12.y*c13y2+2*c11.y*c12.x*c21x2*c13y2+c11x2*c11.y*c22.x*c13y2-c12.x*c21x2*c12y2*c13.y-3*c20.y*c21x2*c13.x*c13y2-3*c10x2*c13.x*c13y2*c22.y+3*c10y2*c13x2*c22.x*c13.y-c11x2*c12y2*c13.x*c22.y+c11y2*c12x2*c22.x*c13.y-3*c20x2*c13.x*c13y2*c22.y+3*c20y2*c13x2*c22.x*c13.y+c12x2*c12.y*c13.x*(2*c20.y*c22.y+c21y2)+c11.x*c12.x*c13.x*c13.y*(6*c20.y*c22.y+3*c21y2)+c12x3*c13.y*(-2*c20.y*c22.y-c21y2)+c10.y*c13x3*(6*c20.y*c22.y+3*c21y2)+c11.y*c12.x*c13x2*(-2*c20.y*c22.y-c21y2)+c11.x*c12.y*c13x2*(-4*c20.y*c22.y-2*c21y2)+c10.x*c13x2*c13.y*(-6*c20.y*c22.y-3*c21y2)+c20.x*c13x2*c13.y*(6*c20.y*c22.y+3*c21y2)+c13x3*(-2*c20.y*c21y2-c20y2*c22.y-c20.y*(2*c20.y*c22.y+c21y2)),-c10.x*c11.x*c12.y*c13.x*c21.y*c13.y+c10.x*c11.y*c12.x*c13.x*c21.y*c13.y+6*c10.x*c11.y*c21.x*c12.y*c13.x*c13.y-6*c10.y*c11.x*c12.x*c13.x*c21.y*c13.y-c10.y*c11.x*c21.x*c12.y*c13.x*c13.y+c10.y*c11.y*c12.x*c21.x*c13.x*c13.y-c11.x*c11.y*c12.x*c21.x*c12.y*c13.y+c11.x*c11.y*c12.x*c12.y*c13.x*c21.y+c11.x*c20.x*c12.y*c13.x*c21.y*c13.y+6*c11.x*c12.x*c20.y*c13.x*c21.y*c13.y+c11.x*c20.y*c21.x*c12.y*c13.x*c13.y-c20.x*c11.y*c12.x*c13.x*c21.y*c13.y-6*c20.x*c11.y*c21.x*c12.y*c13.x*c13.y-c11.y*c12.x*c20.y*c21.x*c13.x*c13.y-6*c10.x*c20.x*c21.x*c13y3-2*c10.x*c21.x*c12y3*c13.x+6*c10.y*c20.y*c13x3*c21.y+2*c20.x*c21.x*c12y3*c13.x+2*c10.y*c12x3*c21.y*c13.y-2*c12x3*c20.y*c21.y*c13.y-6*c10.x*c10.y*c21.x*c13.x*c13y2+3*c10.x*c11.x*c12.x*c21.y*c13y2-2*c10.x*c11.x*c21.x*c12.y*c13y2-4*c10.x*c11.y*c12.x*c21.x*c13y2+3*c10.y*c11.x*c12.x*c21.x*c13y2+6*c10.x*c10.y*c13x2*c21.y*c13.y+6*c10.x*c20.x*c13.x*c21.y*c13y2-3*c10.x*c11.y*c12.y*c13x2*c21.y+2*c10.x*c12.x*c21.x*c12y2*c13.y+2*c10.x*c12.x*c12y2*c13.x*c21.y+6*c10.x*c20.y*c21.x*c13.x*c13y2+4*c10.y*c11.x*c12.y*c13x2*c21.y+6*c10.y*c20.x*c21.x*c13.x*c13y2+2*c10.y*c11.y*c12.x*c13x2*c21.y-3*c10.y*c11.y*c21.x*c12.y*c13x2+2*c10.y*c12.x*c21.x*c12y2*c13.x-3*c11.x*c20.x*c12.x*c21.y*c13y2+2*c11.x*c20.x*c21.x*c12.y*c13y2+c11.x*c11.y*c21.x*c12y2*c13.x-3*c11.x*c12.x*c20.y*c21.x*c13y2+4*c20.x*c11.y*c12.x*c21.x*c13y2-6*c10.x*c20.y*c13x2*c21.y*c13.y-2*c10.x*c12x2*c12.y*c21.y*c13.y-6*c10.y*c20.x*c13x2*c21.y*c13.y-6*c10.y*c20.y*c21.x*c13x2*c13.y-2*c10.y*c12x2*c21.x*c12.y*c13.y-2*c10.y*c12x2*c12.y*c13.x*c21.y-c11.x*c11.y*c12x2*c21.y*c13.y-4*c11.x*c20.y*c12.y*c13x2*c21.y-2*c11.x*c11y2*c21.x*c13.x*c13.y+3*c20.x*c11.y*c12.y*c13x2*c21.y-2*c20.x*c12.x*c21.x*c12y2*c13.y-2*c20.x*c12.x*c12y2*c13.x*c21.y-6*c20.x*c20.y*c21.x*c13.x*c13y2-2*c11.y*c12.x*c20.y*c13x2*c21.y+3*c11.y*c20.y*c21.x*c12.y*c13x2-2*c12.x*c20.y*c21.x*c12y2*c13.x-c11y2*c12.x*c21.x*c12.y*c13.x+6*c20.x*c20.y*c13x2*c21.y*c13.y+2*c20.x*c12x2*c12.y*c21.y*c13.y+2*c11x2*c11.y*c13.x*c21.y*c13.y+c11x2*c12.x*c12.y*c21.y*c13.y+2*c12x2*c20.y*c21.x*c12.y*c13.y+2*c12x2*c20.y*c12.y*c13.x*c21.y+3*c10x2*c21.x*c13y3-3*c10y2*c13x3*c21.y+3*c20x2*c21.x*c13y3+c11y3*c21.x*c13x2-c11x3*c21.y*c13y2-3*c20y2*c13x3*c21.y-c11.x*c11y2*c13x2*c21.y+c11x2*c11.y*c21.x*c13y2-3*c10x2*c13.x*c21.y*c13y2+3*c10y2*c21.x*c13x2*c13.y-c11x2*c12y2*c13.x*c21.y+c11y2*c12x2*c21.x*c13.y-3*c20x2*c13.x*c21.y*c13y2+3*c20y2*c21.x*c13x2*c13.y,c10.x*c10.y*c11.x*c12.y*c13.x*c13.y-c10.x*c10.y*c11.y*c12.x*c13.x*c13.y+c10.x*c11.x*c11.y*c12.x*c12.y*c13.y-c10.y*c11.x*c11.y*c12.x*c12.y*c13.x-c10.x*c11.x*c20.y*c12.y*c13.x*c13.y+6*c10.x*c20.x*c11.y*c12.y*c13.x*c13.y+c10.x*c11.y*c12.x*c20.y*c13.x*c13.y-c10.y*c11.x*c20.x*c12.y*c13.x*c13.y-6*c10.y*c11.x*c12.x*c20.y*c13.x*c13.y+c10.y*c20.x*c11.y*c12.x*c13.x*c13.y-c11.x*c20.x*c11.y*c12.x*c12.y*c13.y+c11.x*c11.y*c12.x*c20.y*c12.y*c13.x+c11.x*c20.x*c20.y*c12.y*c13.x*c13.y-c20.x*c11.y*c12.x*c20.y*c13.x*c13.y-2*c10.x*c20.x*c12y3*c13.x+2*c10.y*c12x3*c20.y*c13.y-3*c10.x*c10.y*c11.x*c12.x*c13y2-6*c10.x*c10.y*c20.x*c13.x*c13y2+3*c10.x*c10.y*c11.y*c12.y*c13x2-2*c10.x*c10.y*c12.x*c12y2*c13.x-2*c10.x*c11.x*c20.x*c12.y*c13y2-c10.x*c11.x*c11.y*c12y2*c13.x+3*c10.x*c11.x*c12.x*c20.y*c13y2-4*c10.x*c20.x*c11.y*c12.x*c13y2+3*c10.y*c11.x*c20.x*c12.x*c13y2+6*c10.x*c10.y*c20.y*c13x2*c13.y+2*c10.x*c10.y*c12x2*c12.y*c13.y+2*c10.x*c11.x*c11y2*c13.x*c13.y+2*c10.x*c20.x*c12.x*c12y2*c13.y+6*c10.x*c20.x*c20.y*c13.x*c13y2-3*c10.x*c11.y*c20.y*c12.y*c13x2+2*c10.x*c12.x*c20.y*c12y2*c13.x+c10.x*c11y2*c12.x*c12.y*c13.x+c10.y*c11.x*c11.y*c12x2*c13.y+4*c10.y*c11.x*c20.y*c12.y*c13x2-3*c10.y*c20.x*c11.y*c12.y*c13x2+2*c10.y*c20.x*c12.x*c12y2*c13.x+2*c10.y*c11.y*c12.x*c20.y*c13x2+c11.x*c20.x*c11.y*c12y2*c13.x-3*c11.x*c20.x*c12.x*c20.y*c13y2-2*c10.x*c12x2*c20.y*c12.y*c13.y-6*c10.y*c20.x*c20.y*c13x2*c13.y-2*c10.y*c20.x*c12x2*c12.y*c13.y-2*c10.y*c11x2*c11.y*c13.x*c13.y-c10.y*c11x2*c12.x*c12.y*c13.y-2*c10.y*c12x2*c20.y*c12.y*c13.x-2*c11.x*c20.x*c11y2*c13.x*c13.y-c11.x*c11.y*c12x2*c20.y*c13.y+3*c20.x*c11.y*c20.y*c12.y*c13x2-2*c20.x*c12.x*c20.y*c12y2*c13.x-c20.x*c11y2*c12.x*c12.y*c13.x+3*c10y2*c11.x*c12.x*c13.x*c13.y+3*c11.x*c12.x*c20y2*c13.x*c13.y+2*c20.x*c12x2*c20.y*c12.y*c13.y-3*c10x2*c11.y*c12.y*c13.x*c13.y+2*c11x2*c11.y*c20.y*c13.x*c13.y+c11x2*c12.x*c20.y*c12.y*c13.y-3*c20x2*c11.y*c12.y*c13.x*c13.y-c10x3*c13y3+c10y3*c13x3+c20x3*c13y3-c20y3*c13x3-3*c10.x*c20x2*c13y3-c10.x*c11y3*c13x2+3*c10x2*c20.x*c13y3+c10.y*c11x3*c13y2+3*c10.y*c20y2*c13x3+c20.x*c11y3*c13x2+c10x2*c12y3*c13.x-3*c10y2*c20.y*c13x3-c10y2*c12x3*c13.y+c20x2*c12y3*c13.x-c11x3*c20.y*c13y2-c12x3*c20y2*c13.y-c10.x*c11x2*c11.y*c13y2+c10.y*c11.x*c11y2*c13x2-3*c10.x*c10y2*c13x2*c13.y-c10.x*c11y2*c12x2*c13.y+c10.y*c11x2*c12y2*c13.x-c11.x*c11y2*c20.y*c13x2+3*c10x2*c10.y*c13.x*c13y2+c10x2*c11.x*c12.y*c13y2+2*c10x2*c11.y*c12.x*c13y2-2*c10y2*c11.x*c12.y*c13x2-c10y2*c11.y*c12.x*c13x2+c11x2*c20.x*c11.y*c13y2-3*c10.x*c20y2*c13x2*c13.y+3*c10.y*c20x2*c13.x*c13y2+c11.x*c20x2*c12.y*c13y2-2*c11.x*c20y2*c12.y*c13x2+c20.x*c11y2*c12x2*c13.y-c11.y*c12.x*c20y2*c13x2-c10x2*c12.x*c12y2*c13.y-3*c10x2*c20.y*c13.x*c13y2+3*c10y2*c20.x*c13x2*c13.y+c10y2*c12x2*c12.y*c13.x-c11x2*c20.y*c12y2*c13.x+2*c20x2*c11.y*c12.x*c13y2+3*c20.x*c20y2*c13x2*c13.y-c20x2*c12.x*c12y2*c13.y-3*c20x2*c20.y*c13.x*c13y2+c12x2*c20y2*c12.y*c13.x);var roots=poly.getRootsInInterval(0,1);for(var i=0;i<roots.length;i++){var s=roots[i];var xp=new Polynomial(c13.x,c12.x,c11.x,c10.x-c20.x-s*c21.x-s*s*c22.x-s*s*s*c23.x);xp.simplify();xRoots=xp.getRoots();var yp=new Polynomial(c13.y,c12.y,c11.y,c10.y-c20.y-s*c21.y-s*s*c22.y-s*s*s*c23.y);yp.simplify();yRoots=yp.getRoots();if(xRoots.length>0&&yRoots.length>0){var TOLERANCE=1e-4;checkRoots:for(var j=0;j<xRoots.length;j++){var xRoot=xRoots[j];if(0<=xRoot&&xRoot<=1){for(var k=0;k<yRoots.length;k++){if(Math.abs(xRoot-yRoots[k])<TOLERANCE){result.points.push(c23.multiply(s*s*s).add(c22.multiply(s*s).add(c21.multiply(s).add(c20))));break checkRoots}}}}}}if(result.points.length>0){result.status="Intersection"}return result};Intersection.intersectBezier3Circle=function(p1,p2,p3,p4,c,r){return Intersection.intersectBezier3Ellipse(p1,p2,p3,p4,c,r,r)};Intersection.intersectBezier3Ellipse=function(p1,p2,p3,p4,ec,rx,ry){var a,b,c,d;var c3,c2,c1,c0;var result=new Intersection("No Intersection");a=p1.multiply(-1);b=p2.multiply(3);c=p3.multiply(-3);d=a.add(b.add(c.add(p4)));c3=new Vector2D(d.x,d.y);a=p1.multiply(3);b=p2.multiply(-6);c=p3.multiply(3);d=a.add(b.add(c));c2=new Vector2D(d.x,d.y);a=p1.multiply(-3);b=p2.multiply(3);c=a.add(b);c1=new Vector2D(c.x,c.y);c0=new Vector2D(p1.x,p1.y);var rxrx=rx*rx;var ryry=ry*ry;var poly=new Polynomial(c3.x*c3.x*ryry+c3.y*c3.y*rxrx,2*(c3.x*c2.x*ryry+c3.y*c2.y*rxrx),2*(c3.x*c1.x*ryry+c3.y*c1.y*rxrx)+c2.x*c2.x*ryry+c2.y*c2.y*rxrx,2*c3.x*ryry*(c0.x-ec.x)+2*c3.y*rxrx*(c0.y-ec.y)+2*(c2.x*c1.x*ryry+c2.y*c1.y*rxrx),2*c2.x*ryry*(c0.x-ec.x)+2*c2.y*rxrx*(c0.y-ec.y)+c1.x*c1.x*ryry+c1.y*c1.y*rxrx,2*c1.x*ryry*(c0.x-ec.x)+2*c1.y*rxrx*(c0.y-ec.y),c0.x*c0.x*ryry-2*c0.y*ec.y*rxrx-2*c0.x*ec.x*ryry+c0.y*c0.y*rxrx+ec.x*ec.x*ryry+ec.y*ec.y*rxrx-rxrx*ryry);var roots=poly.getRootsInInterval(0,1);for(var i=0;i<roots.length;i++){var t=roots[i];result.points.push(c3.multiply(t*t*t).add(c2.multiply(t*t).add(c1.multiply(t).add(c0))))}if(result.points.length>0){result.status="Intersection"}return result};Intersection.intersectBezier3Line=function(p1,p2,p3,p4,a1,a2){var a,b,c,d;var c3,c2,c1,c0;var cl;var n;var min=a1.min(a2);var max=a1.max(a2);var result=new Intersection("No Intersection");a=p1.multiply(-1);b=p2.multiply(3);c=p3.multiply(-3);d=a.add(b.add(c.add(p4)));c3=new Vector2D(d.x,d.y);a=p1.multiply(3);b=p2.multiply(-6);c=p3.multiply(3);d=a.add(b.add(c));c2=new Vector2D(d.x,d.y);a=p1.multiply(-3);b=p2.multiply(3);c=a.add(b);c1=new Vector2D(c.x,c.y);c0=new Vector2D(p1.x,p1.y);n=new Vector2D(a1.y-a2.y,a2.x-a1.x);cl=a1.x*a2.y-a2.x*a1.y;roots=new Polynomial(n.dot(c3),n.dot(c2),n.dot(c1),n.dot(c0)+cl).getRoots();for(var i=0;i<roots.length;i++){var t=roots[i];if(0<=t&&t<=1){var p5=p1.lerp(p2,t);var p6=p2.lerp(p3,t);var p7=p3.lerp(p4,t);var p8=p5.lerp(p6,t);var p9=p6.lerp(p7,t);var p10=p8.lerp(p9,t);if(a1.x==a2.x){if(min.y<=p10.y&&p10.y<=max.y){result.status="Intersection";result.appendPoint(p10)}}else if(a1.y==a2.y){if(min.x<=p10.x&&p10.x<=max.x){result.status="Intersection";result.appendPoint(p10)}}else if(min.x<=p10.x&&p10.x<=max.x&&min.y<=p10.y&&p10.y<=max.y){result.status="Intersection";result.appendPoint(p10)}}}return result};Intersection.intersectBezier3Polygon=function(p1,p2,p3,p4,points){return this.intersectBezier3Polyline(p1,p2,p3,p4,closePolygon(points))};Intersection.intersectBezier3Polyline=function(p1,p2,p3,p4,points){var result=new Intersection("No Intersection");var length=points.length;for(var i=0;i<length-1;i++){var a1=points[i];var a2=points[i+1];var inter=Intersection.intersectBezier3Line(p1,p2,p3,p4,a1,a2);result.appendPoints(inter.points)}if(result.points.length>0){result.status="Intersection"}return result};Intersection.intersectBezier3Rectangle=function(p1,p2,p3,p4,r1,r2){var min=r1.min(r2);var max=r1.max(r2);var topRight=new Point2D(max.x,min.y);var bottomLeft=new Point2D(min.x,max.y);var inter1=Intersection.intersectBezier3Line(p1,p2,p3,p4,min,topRight);var inter2=Intersection.intersectBezier3Line(p1,p2,p3,p4,topRight,max);var inter3=Intersection.intersectBezier3Line(p1,p2,p3,p4,max,bottomLeft);var inter4=Intersection.intersectBezier3Line(p1,p2,p3,p4,bottomLeft,min);var result=new Intersection("No Intersection");result.appendPoints(inter1.points);result.appendPoints(inter2.points);result.appendPoints(inter3.points);result.appendPoints(inter4.points);if(result.points.length>0){result.status="Intersection"}return result};Intersection.intersectCircleCircle=function(c1,r1,c2,r2){var result;var r_max=r1+r2;var r_min=Math.abs(r1-r2);var c_dist=c1.distanceFrom(c2);if(c_dist>r_max){result=new Intersection("Outside")}else if(c_dist<r_min){result=new Intersection("Inside")}else{result=new Intersection("Intersection");var a=(r1*r1-r2*r2+c_dist*c_dist)/(2*c_dist);var h=Math.sqrt(r1*r1-a*a);var p=c1.lerp(c2,a/c_dist);var b=h/c_dist;result.points.push(new Point2D(p.x-b*(c2.y-c1.y),p.y+b*(c2.x-c1.x)));result.points.push(new Point2D(p.x+b*(c2.y-c1.y),p.y-b*(c2.x-c1.x)))}return result};Intersection.intersectCircleEllipse=function(cc,r,ec,rx,ry){return Intersection.intersectEllipseEllipse(cc,r,r,ec,rx,ry)};Intersection.intersectCircleLine=function(c,r,a1,a2){var result;var a=(a2.x-a1.x)*(a2.x-a1.x)+(a2.y-a1.y)*(a2.y-a1.y);var b=2*((a2.x-a1.x)*(a1.x-c.x)+(a2.y-a1.y)*(a1.y-c.y));var cc=c.x*c.x+c.y*c.y+a1.x*a1.x+a1.y*a1.y-2*(c.x*a1.x+c.y*a1.y)-r*r;var deter=b*b-4*a*cc;if(deter<0){result=new Intersection("Outside")}else if(deter==0){result=new Intersection("Tangent")}else{var e=Math.sqrt(deter);var u1=(-b+e)/(2*a);var u2=(-b-e)/(2*a);if((u1<0||u1>1)&&(u2<0||u2>1)){if(u1<0&&u2<0||u1>1&&u2>1){result=new Intersection("Outside")}else{result=new Intersection("Inside")}}else{result=new Intersection("Intersection");if(0<=u1&&u1<=1){result.points.push(a1.lerp(a2,u1))}if(0<=u2&&u2<=1){result.points.push(a1.lerp(a2,u2))}}}return result};Intersection.intersectCirclePolygon=function(c,r,points){return this.intersectCirclePolyline(c,r,closePolygon(points))};Intersection.intersectCirclePolyline=function(c,r,points){var result=new Intersection("No Intersection");var length=points.length;var inter;for(var i=0;i<length-1;i++){var a1=points[i];var a2=points[i+1];inter=Intersection.intersectCircleLine(c,r,a1,a2);result.appendPoints(inter.points)}if(result.points.length>0){result.status="Intersection"}else{result.status=inter.status}return result};Intersection.intersectCircleRectangle=function(c,r,r1,r2){var min=r1.min(r2);var max=r1.max(r2);var topRight=new Point2D(max.x,min.y);var bottomLeft=new Point2D(min.x,max.y);var inter1=Intersection.intersectCircleLine(c,r,min,topRight);var inter2=Intersection.intersectCircleLine(c,r,topRight,max);var inter3=Intersection.intersectCircleLine(c,r,max,bottomLeft);var inter4=Intersection.intersectCircleLine(c,r,bottomLeft,min);var result=new Intersection("No Intersection");result.appendPoints(inter1.points);result.appendPoints(inter2.points);result.appendPoints(inter3.points);result.appendPoints(inter4.points);if(result.points.length>0){result.status="Intersection"}else{result.status=inter1.status}return result};Intersection.intersectEllipseEllipse=function(c1,rx1,ry1,c2,rx2,ry2){var a=[ry1*ry1,0,rx1*rx1,-2*ry1*ry1*c1.x,-2*rx1*rx1*c1.y,ry1*ry1*c1.x*c1.x+rx1*rx1*c1.y*c1.y-rx1*rx1*ry1*ry1];var b=[ry2*ry2,0,rx2*rx2,-2*ry2*ry2*c2.x,-2*rx2*rx2*c2.y,ry2*ry2*c2.x*c2.x+rx2*rx2*c2.y*c2.y-rx2*rx2*ry2*ry2];var yPoly=Intersection.bezout(a,b);var yRoots=yPoly.getRoots();var epsilon=.001;var norm0=(a[0]*a[0]+2*a[1]*a[1]+a[2]*a[2])*epsilon;var norm1=(b[0]*b[0]+2*b[1]*b[1]+b[2]*b[2])*epsilon;var result=new Intersection("No Intersection");for(var y=0;y<yRoots.length;y++){var xPoly=new Polynomial(a[0],a[3]+yRoots[y]*a[1],a[5]+yRoots[y]*(a[4]+yRoots[y]*a[2]));var xRoots=xPoly.getRoots();for(var x=0;x<xRoots.length;x++){var test=(a[0]*xRoots[x]+a[1]*yRoots[y]+a[3])*xRoots[x]+(a[2]*yRoots[y]+a[4])*yRoots[y]+a[5];if(Math.abs(test)<norm0){test=(b[0]*xRoots[x]+b[1]*yRoots[y]+b[3])*xRoots[x]+(b[2]*yRoots[y]+b[4])*yRoots[y]+b[5];if(Math.abs(test)<norm1){result.appendPoint(new Point2D(xRoots[x],yRoots[y]))}}}}if(result.points.length>0){result.status="Intersection"}return result};Intersection.intersectEllipseLine=function(c,rx,ry,a1,a2){var result;var origin=new Vector2D(a1.x,a1.y);var dir=Vector2D.fromPoints(a1,a2);var center=new Vector2D(c.x,c.y);var diff=origin.subtract(center);var mDir=new Vector2D(dir.x/(rx*rx),dir.y/(ry*ry));var mDiff=new Vector2D(diff.x/(rx*rx),diff.y/(ry*ry));var a=dir.dot(mDir);var b=dir.dot(mDiff);var c=diff.dot(mDiff)-1;var d=b*b-a*c;if(d<0){result=new Intersection("Outside")}else if(d>0){var root=Math.sqrt(d);var t_a=(-b-root)/a;var t_b=(-b+root)/a;if((t_a<0||1<t_a)&&(t_b<0||1<t_b)){if(t_a<0&&t_b<0||t_a>1&&t_b>1){result=new Intersection("Outside")}else{result=new Intersection("Inside")}}else{result=new Intersection("Intersection");if(0<=t_a&&t_a<=1){result.appendPoint(a1.lerp(a2,t_a))}if(0<=t_b&&t_b<=1){result.appendPoint(a1.lerp(a2,t_b))}}}else{var t=-b/a;if(0<=t&&t<=1){result=new Intersection("Intersection");result.appendPoint(a1.lerp(a2,t))}else{result=new Intersection("Outside")}}return result};Intersection.intersectEllipsePolygon=function(c,rx,ry,points){return this.intersectEllipsePolyline(c,rx,ry,closePolygon(points))};Intersection.intersectEllipsePolyline=function(c,rx,ry,points){var result=new Intersection("No Intersection");var length=points.length;for(var i=0;i<length-1;i++){var b1=points[i];var b2=points[i+1];var inter=Intersection.intersectEllipseLine(c,rx,ry,b1,b2);result.appendPoints(inter.points)}if(result.points.length>0){result.status="Intersection"}return result};Intersection.intersectEllipseRectangle=function(c,rx,ry,r1,r2){var min=r1.min(r2);var max=r1.max(r2);var topRight=new Point2D(max.x,min.y);var bottomLeft=new Point2D(min.x,max.y);var inter1=Intersection.intersectEllipseLine(c,rx,ry,min,topRight);var inter2=Intersection.intersectEllipseLine(c,rx,ry,topRight,max);var inter3=Intersection.intersectEllipseLine(c,rx,ry,max,bottomLeft);var inter4=Intersection.intersectEllipseLine(c,rx,ry,bottomLeft,min);var result=new Intersection("No Intersection");result.appendPoints(inter1.points);result.appendPoints(inter2.points);result.appendPoints(inter3.points);result.appendPoints(inter4.points);if(result.points.length>0){result.status="Intersection"}return result};Intersection.intersectLineLine=function(a1,a2,b1,b2){var result;var ua_t=(b2.x-b1.x)*(a1.y-b1.y)-(b2.y-b1.y)*(a1.x-b1.x);var ub_t=(a2.x-a1.x)*(a1.y-b1.y)-(a2.y-a1.y)*(a1.x-b1.x);var u_b=(b2.y-b1.y)*(a2.x-a1.x)-(b2.x-b1.x)*(a2.y-a1.y);if(u_b!=0){var ua=ua_t/u_b;var ub=ub_t/u_b;if(0<=ua&&ua<=1&&0<=ub&&ub<=1){result=new Intersection("Intersection");result.points.push(new Point2D(a1.x+ua*(a2.x-a1.x),a1.y+ua*(a2.y-a1.y)))}else{result=new Intersection("No Intersection")}}else{if(ua_t==0||ub_t==0){result=new Intersection("Coincident")}else{result=new Intersection("Parallel")}}return result};Intersection.intersectLinePolygon=function(a1,a2,points){return this.intersectLinePolyline(a1,a2,closePolygon(points))};Intersection.intersectLinePolyline=function(a1,a2,points){var result=new Intersection("No Intersection");var length=points.length;for(var i=0;i<length-1;i++){var b1=points[i];var b2=points[i+1];var inter=Intersection.intersectLineLine(a1,a2,b1,b2);result.appendPoints(inter.points)}if(result.points.length>0){result.status="Intersection"}return result};Intersection.intersectLineRectangle=function(a1,a2,r1,r2){var min=r1.min(r2);var max=r1.max(r2);var topRight=new Point2D(max.x,min.y);var bottomLeft=new Point2D(min.x,max.y);var inter1=Intersection.intersectLineLine(min,topRight,a1,a2);var inter2=Intersection.intersectLineLine(topRight,max,a1,a2);var inter3=Intersection.intersectLineLine(max,bottomLeft,a1,a2);var inter4=Intersection.intersectLineLine(bottomLeft,min,a1,a2);var result=new Intersection("No Intersection");result.appendPoints(inter1.points);result.appendPoints(inter2.points);result.appendPoints(inter3.points);result.appendPoints(inter4.points);if(result.points.length>0){result.status="Intersection"}return result};Intersection.intersectPolygonPolygon=function(points1,points2){return this.intersectPolylinePolyline(closePolygon(points1),closePolygon(points2))};Intersection.intersectPolygonPolyline=function(points1,points2){return this.intersectPolylinePolyline(closePolygon(points1),points2)};Intersection.intersectPolygonRectangle=function(points,r1,r2){return this.intersectPolylineRectangle(closePolygon(points),r1,r2)};Intersection.intersectPolylinePolyline=function(points1,points2){var result=new Intersection("No Intersection");var length=points1.length;for(var i=0;i<length-1;i++){var a1=points1[i];var a2=points1[i+1];var inter=Intersection.intersectLinePolyline(a1,a2,points2);result.appendPoints(inter.points)}if(result.points.length>0){result.status="Intersection"}return result};Intersection.intersectPolylineRectangle=function(points,r1,r2){var min=r1.min(r2);var max=r1.max(r2);var topRight=new Point2D(max.x,min.y);var bottomLeft=new Point2D(min.x,max.y);var inter1=Intersection.intersectLinePolyline(min,topRight,points);var inter2=Intersection.intersectLinePolyline(topRight,max,points);var inter3=Intersection.intersectLinePolyline(max,bottomLeft,points);var inter4=Intersection.intersectLinePolyline(bottomLeft,min,points);var result=new Intersection("No Intersection");result.appendPoints(inter1.points);result.appendPoints(inter2.points);result.appendPoints(inter3.points);result.appendPoints(inter4.points);if(result.points.length>0){result.status="Intersection"}return result};Intersection.intersectRectangleRectangle=function(a1,a2,b1,b2){var min=a1.min(a2);var max=a1.max(a2);var topRight=new Point2D(max.x,min.y);var bottomLeft=new Point2D(min.x,max.y);var inter1=Intersection.intersectLineRectangle(min,topRight,b1,b2);var inter2=Intersection.intersectLineRectangle(topRight,max,b1,b2);var inter3=Intersection.intersectLineRectangle(max,bottomLeft,b1,b2);var inter4=Intersection.intersectLineRectangle(bottomLeft,min,b1,b2);var result=new Intersection("No Intersection");result.appendPoints(inter1.points);result.appendPoints(inter2.points);result.appendPoints(inter3.points);result.appendPoints(inter4.points);if(result.points.length>0){result.status="Intersection"}return result};Intersection.intersectRayRay=function(a1,a2,b1,b2){var result;var ua_t=(b2.x-b1.x)*(a1.y-b1.y)-(b2.y-b1.y)*(a1.x-b1.x);var ub_t=(a2.x-a1.x)*(a1.y-b1.y)-(a2.y-a1.y)*(a1.x-b1.x);var u_b=(b2.y-b1.y)*(a2.x-a1.x)-(b2.x-b1.x)*(a2.y-a1.y);if(u_b!=0){var ua=ua_t/u_b;result=new Intersection("Intersection");result.points.push(new Point2D(a1.x+ua*(a2.x-a1.x),a1.y+ua*(a2.y-a1.y)))}else{if(ua_t==0||ub_t==0){result=new Intersection("Coincident")}else{result=new Intersection("Parallel")}}return result};Intersection.bezout=function(e1,e2){var AB=e1[0]*e2[1]-e2[0]*e1[1];var AC=e1[0]*e2[2]-e2[0]*e1[2];var AD=e1[0]*e2[3]-e2[0]*e1[3];var AE=e1[0]*e2[4]-e2[0]*e1[4];var AF=e1[0]*e2[5]-e2[0]*e1[5];var BC=e1[1]*e2[2]-e2[1]*e1[2];var BE=e1[1]*e2[4]-e2[1]*e1[4];var BF=e1[1]*e2[5]-e2[1]*e1[5];var CD=e1[2]*e2[3]-e2[2]*e1[3];var DE=e1[3]*e2[4]-e2[3]*e1[4];var DF=e1[3]*e2[5]-e2[3]*e1[5];var BFpDE=BF+DE;var BEmCD=BE-CD;return new Polynomial(AB*BC-AC*AC,AB*BEmCD+AD*BC-2*AC*AE,AB*BFpDE+AD*BEmCD-AE*AE-2*AC*AF,AB*DF+AD*BFpDE-2*AE*AF,AD*DF-AF*AF)};if(typeof module!=="undefined"){module.exports=Intersection}},{"kld-affine":7,"kld-polynomial":11}],4:[function(require,module,exports){function IntersectionArgs(name,args){this.init(name,args)}IntersectionArgs.prototype.init=function(name,args){this.name=name;this.args=args};if(typeof module!=="undefined"){module.exports=IntersectionArgs}},{}],5:[function(require,module,exports){var IntersectionQuery={};IntersectionQuery.pointInCircle=function(point,center,radius){var v=Vector.fromPoints(center,point);return v.length()<=radius};IntersectionQuery.pointInEllipse=function(point,center,radiusX,radiusY){var len=point.subtract(center);return len.x*len.x/(radiusX*radiusX)+len.y*len.y/(radiusY*radiusY)<=1};IntersectionQuery.pointInPolyline=function(point,points){var length=points.length;var counter=0;var x_inter;var p1=points[0];for(var i=1;i<=length;i++){var p2=points[i%length];var minY=Math.min(p1.y,p2.y);var maxY=Math.max(p1.y,p2.y);var maxX=Math.max(p1.x,p2.x);if(p1.y!=p2.y&&minY<point.y&&point.y<=maxY&&point.x<=maxX){x_inter=(point.y-p1.y)*(p2.x-p1.x)/(p2.y-p1.y)+p1.x;if(p1.x==p2.x||point.x<=x_inter){counter++}}p1=p2}return counter%2==1};IntersectionQuery.pointInPolygon=IntersectionQuery.pointInPolyline;IntersectionQuery.pointInRectangle=function(point,topLeft,bottomRight){return topLeft.x<=point.x&&point.x<bottomRight.x&&topleft.y<=point.y&&point.y<bottomRight.y};if(typeof module!=="undefined"){module.exports=IntersectionQuery}},{}],6:[function(require,module,exports){if(typeof module!=="undefined"){var Point2D=require("kld-affine").Point2D,IntersectionArgs=require("./IntersectionArgs")}var Shapes={};Shapes.quadraticBezier=function(p1x,p1y,p2x,p2y,p3x,p3y){return new IntersectionArgs("Bezier2",[new Point2D(p1x,p1y),new Point2D(p2x,p2y),new Point2D(p3x,p3y)])};Shapes.cubicBezier=function(p1x,p1y,p2x,p2y,p3x,p3y,p4x,p4y){return new IntersectionArgs("Bezier3",[new Point2D(p1x,p1y),new Point2D(p2x,p2y),new Point2D(p3x,p3y),new Point2D(p4x,p4y)])};Shapes.circle=function(centerX,centerY,radius){return new IntersectionArgs("Circle",[new Point2D(centerX,centerY),radius])};Shapes.ellipse=function(centerX,centerY,radiusX,radiusY){return new IntersectionArgs("Ellipse",[new Point2D(centerX,centerY),radiusX,radiusY])};Shapes.line=function(p1x,p1y,p2x,p2y){return new IntersectionArgs("Line",[new Point2D(p1x,p1y),new Point2D(p2x,p2y)])};Shapes.path=function(segments){return new IntersectionArgs("Path",segments)};Shapes.polygon=function(coords){var points=[];for(var i=0;i<coords.length;i+=2){points.push(new Point2D(coords[i],coords[i+1]))}return new IntersectionArgs("Polygon",[points])};Shapes.polyline=function(coords){var points=[];for(var i=0;i<coords.length;i+=2){points.push(new Point2D(coords[i],coords[i+1]))}return new IntersectionArgs("Polyline",[points])};Shapes.rectangle=function(x,y,width,height){return new IntersectionArgs("Rectangle",[new Point2D(x,y),new Point2D(x+width,y+height)])};if(typeof module!=="undefined"){module.exports=Shapes}},{"./IntersectionArgs":4,"kld-affine":7}],7:[function(require,module,exports){exports.Point2D=require("./lib/Point2D");exports.Vector2D=require("./lib/Vector2D");exports.Matrix2D=require("./lib/Matrix2D")},{"./lib/Matrix2D":8,"./lib/Point2D":9,"./lib/Vector2D":10}],8:[function(require,module,exports){function setReadonlyProperty(object,property,value){Object.defineProperty(object,property,{value:value,writable:false,enumerable:true,configurable:false})}setReadonlyProperty(Matrix2D,"IDENTITY",new Matrix2D(1,0,0,1,0,0));setReadonlyProperty(Matrix2D.IDENTITY,"isIdentity",function(){return true});function Matrix2D(a,b,c,d,e,f){setReadonlyProperty(this,"a",a!==undefined?a:1);setReadonlyProperty(this,"b",b!==undefined?b:0);setReadonlyProperty(this,"c",c!==undefined?c:0);setReadonlyProperty(this,"d",d!==undefined?d:1);setReadonlyProperty(this,"e",e!==undefined?e:0);setReadonlyProperty(this,"f",f!==undefined?f:0)}Matrix2D.translation=function(tx,ty){return new Matrix2D(1,0,0,1,tx,ty)};Matrix2D.scaling=function(scale){return new Matrix2D(scale,0,0,scale,0,0)};Matrix2D.scalingAt=function(scale,center){return new Matrix2D(scale,0,0,scale,center.x-center.x*scale,center.y-center.y*scale)};Matrix2D.nonUniformScaling=function(scaleX,scaleY){return new Matrix2D(scaleX,0,0,scaleY,0,0)};Matrix2D.nonUniformScalingAt=function(scaleX,scaleY,center){return new Matrix2D(scaleX,0,0,scaleY,center.x-center.x*scaleX,center.y-center.y*scaleY)};Matrix2D.rotation=function(radians){let c=Math.cos(radians);let s=Math.sin(radians);return new Matrix2D(c,s,-s,c,0,0)};Matrix2D.rotationAt=function(radians,center){let c=Math.cos(radians);let s=Math.sin(radians);return new Matrix2D(c,s,-s,c,center.x-center.x*c+center.y*s,center.y-center.y*c-center.x*s)};Matrix2D.rotationFromVector=function(vector){var unit=vector.unit();var c=unit.x;var s=unit.y;return new Matrix2D(c,s,-s,c,0,0)};Matrix2D.xFlip=function(){return new Matrix2D(-1,0,0,1,0,0)};Matrix2D.yFlip=function(){return new Matrix2D(1,0,0,-1,0,0)};Matrix2D.xSkew=function(radians){var t=Math.tan(radians);return new Matrix2D(1,0,t,1,0,0)};Matrix2D.ySkew=function(radians){var t=Math.tan(radians);return new Matrix2D(1,t,0,1,0,0)};Matrix2D.prototype.multiply=function(that){if(this.isIdentity()){return that}if(that.isIdentity()){return this}return new this.constructor(this.a*that.a+this.c*that.b,this.b*that.a+this.d*that.b,this.a*that.c+this.c*that.d,this.b*that.c+this.d*that.d,this.a*that.e+this.c*that.f+this.e,this.b*that.e+this.d*that.f+this.f)};Matrix2D.prototype.inverse=function(){if(this.isIdentity()){return this}var det1=this.a*this.d-this.b*this.c;if(det1===0){throw"Matrix is not invertible"}var idet=1/det1;var det2=this.f*this.c-this.e*this.d;var det3=this.e*this.b-this.f*this.a;return new this.constructor(this.d*idet,-this.b*idet,-this.c*idet,this.a*idet,det2*idet,det3*idet)};Matrix2D.prototype.translate=function(tx,ty){return new this.constructor(this.a,this.b,this.c,this.d,this.a*tx+this.c*ty+this.e,this.b*tx+this.d*ty+this.f)};Matrix2D.prototype.scale=function(scale){return new this.constructor(this.a*scale,this.b*scale,this.c*scale,this.d*scale,this.e,this.f)};Matrix2D.prototype.scaleAt=function(scale,center){var dx=center.x-scale*center.x;var dy=center.y-scale*center.y;return new this.constructor(this.a*scale,this.b*scale,this.c*scale,this.d*scale,this.a*dx+this.c*dy+this.e,this.b*dx+this.d*dy+this.f)};Matrix2D.prototype.scaleNonUniform=function(scaleX,scaleY){return new this.constructor(this.a*scaleX,this.b*scaleX,this.c*scaleY,this.d*scaleY,this.e,this.f)};Matrix2D.prototype.scaleNonUniformAt=function(scaleX,scaleY,center){var dx=center.x-scaleX*center.x;var dy=center.y-scaleY*center.y;return new this.constructor(this.a*scaleX,this.b*scaleX,this.c*scaleY,this.d*scaleY,this.a*dx+this.c*dy+this.e,this.b*dx+this.d*dy+this.f)};Matrix2D.prototype.rotate=function(radians){var c=Math.cos(radians);var s=Math.sin(radians);return new this.constructor(this.a*c+this.c*s,this.b*c+this.d*s,this.a*-s+this.c*c,this.b*-s+this.d*c,this.e,this.f)};Matrix2D.prototype.rotateAt=function(radians,center){var cos=Math.cos(radians);var sin=Math.sin(radians);var cx=center.x;var cy=center.y;var a=this.a*cos+this.c*sin;var b=this.b*cos+this.d*sin;var c=this.c*cos-this.a*sin;var d=this.d*cos-this.b*sin;return new this.constructor(a,b,c,d,(this.a-a)*cx+(this.c-c)*cy+this.e,(this.b-b)*cx+(this.d-d)*cy+this.f)};Matrix2D.prototype.rotateFromVector=function(vector){var unit=vector.unit();var c=unit.x;var s=unit.y;return new this.constructor(this.a*c+this.c*s,this.b*c+this.d*s,this.a*-s+this.c*c,this.b*-s+this.d*c,this.e,this.f)};Matrix2D.prototype.flipX=function(){return new this.constructor(-this.a,-this.b,this.c,this.d,this.e,this.f)};Matrix2D.prototype.flipY=function(){return new this.constructor(this.a,this.b,-this.c,-this.d,this.e,this.f)};Matrix2D.prototype.skewX=function(radians){var t=Math.tan(radians);return new this.constructor(this.a,this.b,this.c+this.a*t,this.d+this.b*t,this.e,this.f)};Matrix2D.prototype.skewY=function(radians){var t=Math.tan(radians);return new this.constructor(this.a+this.c*t,this.b+this.d*t,this.c,this.d,this.e,this.f)};Matrix2D.prototype.isIdentity=function(){return this.a===1&&this.b===0&&this.c===0&&this.d===1&&this.e===0&&this.f===0};Matrix2D.prototype.isInvertible=function(){return this.a*this.d-this.b*this.c!==0};Matrix2D.prototype.getScale=function(){return{scaleX:Math.sqrt(this.a*this.a+this.c*this.c),scaleY:Math.sqrt(this.b*this.b+this.d*this.d)}};Matrix2D.prototype.getDecomposition=function(){var E=(this.a+this.d)*.5;var F=(this.a-this.d)*.5;var G=(this.b+this.c)*.5;var H=(this.b-this.c)*.5;var Q=Math.sqrt(E*E+H*H);var R=Math.sqrt(F*F+G*G);var scaleX=Q+R;var scaleY=Q-R;var a1=Math.atan2(G,F);var a2=Math.atan2(H,E);var theta=(a2-a1)*.5;var phi=(a2+a1)*.5;return{translation:new this.constructor(1,0,0,1,this.e,this.f),rotation:this.constructor.IDENTITY.rotate(phi),scale:new this.constructor(scaleX,0,0,scaleY,0,0),rotation0:this.constructor.IDENTITY.rotate(theta)}};Matrix2D.prototype.equals=function(that){return this.a===that.a&&this.b===that.b&&this.c===that.c&&this.d===that.d&&this.e===that.e&&this.f===that.f};Matrix2D.prototype.precisionEquals=function(that,precision){return Math.abs(this.a-that.a)<precision&&Math.abs(this.b-that.b)<precision&&Math.abs(this.c-that.c)<precision&&Math.abs(this.d-that.d)<precision&&Math.abs(this.e-that.e)<precision&&Math.abs(this.f-that.f)<precision};Matrix2D.prototype.toString=function(){return"matrix("+[this.a,this.b,this.c,this.d,this.e,this.f].join(",")+")"};if(typeof module!=="undefined"){module.exports=Matrix2D}},{}],9:[function(require,module,exports){function Point2D(x,y){Object.defineProperties(this,{x:{value:x!==undefined?x:0,writable:false,enumerable:true,configurable:false},y:{value:y!==undefined?y:0,writable:false,enumerable:true,configurable:false}})}Point2D.prototype.clone=function(){return new this.constructor(this.x,this.y)};Point2D.prototype.add=function(that){return new this.constructor(this.x+that.x,this.y+that.y)};Point2D.prototype.subtract=function(that){return new this.constructor(this.x-that.x,this.y-that.y)};Point2D.prototype.multiply=function(scalar){return new this.constructor(this.x*scalar,this.y*scalar)};Point2D.prototype.divide=function(scalar){return new this.constructor(this.x/scalar,this.y/scalar)};Point2D.prototype.equals=function(that){return this.x===that.x&&this.y===that.y};Point2D.prototype.precisionEquals=function(that,precision){return Math.abs(this.x-that.x)<precision&&Math.abs(this.y-that.y)<precision};Point2D.prototype.lerp=function(that,t){var omt=1-t;return new this.constructor(this.x*omt+that.x*t,this.y*omt+that.y*t)};Point2D.prototype.distanceFrom=function(that){var dx=this.x-that.x;var dy=this.y-that.y;return Math.sqrt(dx*dx+dy*dy)};Point2D.prototype.min=function(that){return new this.constructor(Math.min(this.x,that.x),Math.min(this.y,that.y))};Point2D.prototype.max=function(that){return new this.constructor(Math.max(this.x,that.x),Math.max(this.y,that.y))};Point2D.prototype.transform=function(matrix){return new this.constructor(matrix.a*this.x+matrix.c*this.y+matrix.e,matrix.b*this.x+matrix.d*this.y+matrix.f)};Point2D.prototype.toString=function(){return"point("+this.x+","+this.y+")"};if(typeof module!=="undefined"){module.exports=Point2D}},{}],10:[function(require,module,exports){function Vector2D(x,y){Object.defineProperties(this,{x:{value:x!==undefined?x:0,writable:false,enumerable:true,configurable:false},y:{value:y!==undefined?y:0,writable:false,enumerable:true,configurable:false}})}Vector2D.fromPoints=function(p1,p2){return new Vector2D(p2.x-p1.x,p2.y-p1.y)};Vector2D.prototype.length=function(){return Math.sqrt(this.x*this.x+this.y*this.y)};Vector2D.prototype.magnitude=function(){return this.x*this.x+this.y*this.y};Vector2D.prototype.dot=function(that){return this.x*that.x+this.y*that.y};Vector2D.prototype.cross=function(that){return this.x*that.y-this.y*that.x};Vector2D.prototype.determinant=function(that){return this.x*that.y-this.y*that.x};Vector2D.prototype.unit=function(){return this.divide(this.length())};Vector2D.prototype.add=function(that){return new this.constructor(this.x+that.x,this.y+that.y)};Vector2D.prototype.subtract=function(that){return new this.constructor(this.x-that.x,this.y-that.y)};Vector2D.prototype.multiply=function(scalar){return new this.constructor(this.x*scalar,this.y*scalar)};Vector2D.prototype.divide=function(scalar){return new this.constructor(this.x/scalar,this.y/scalar)};Vector2D.prototype.angleBetween=function(that){var cos=this.dot(that)/(this.length()*that.length());cos=Math.max(-1,Math.min(cos,1));var radians=Math.acos(cos);return this.cross(that)<0?-radians:radians};Vector2D.prototype.perp=function(){return new this.constructor(-this.y,this.x)};Vector2D.prototype.perpendicular=function(that){return this.subtract(this.project(that))};Vector2D.prototype.project=function(that){var percent=this.dot(that)/that.dot(that);return that.multiply(percent)};Vector2D.prototype.transform=function(matrix){return new this.constructor(matrix.a*this.x+matrix.c*this.y,matrix.b*this.x+matrix.d*this.y)};Vector2D.prototype.equals=function(that){return this.x===that.x&&this.y===that.y};Vector2D.prototype.precisionEquals=function(that,precision){return Math.abs(this.x-that.x)<precision&&Math.abs(this.y-that.y)<precision};Vector2D.prototype.toString=function(){return"vector("+this.x+","+this.y+")"};if(typeof module!=="undefined"){module.exports=Vector2D}},{}],11:[function(require,module,exports){exports.Polynomial=require("./lib/Polynomial");exports.SqrtPolynomial=require("./lib/SqrtPolynomial")},{"./lib/Polynomial":12,"./lib/SqrtPolynomial":13}],12:[function(require,module,exports){Polynomial.TOLERANCE=1e-6;Polynomial.ACCURACY=15;Polynomial.interpolate=function(xs,ys,n,offset,x){if(xs.constructor!==Array||ys.constructor!==Array){throw new Error("Polynomial.interpolate: xs and ys must be arrays")}if(isNaN(n)||isNaN(offset)||isNaN(x)){throw new Error("Polynomial.interpolate: n, offset, and x must be numbers")}var y=0;var dy=0;var c=new Array(n);var d=new Array(n);var ns=0;var diff=Math.abs(x-xs[offset]);for(var i=0;i<n;i++){var dift=Math.abs(x-xs[offset+i]);if(dift<diff){ns=i;diff=dift}c[i]=d[i]=ys[offset+i]}y=ys[offset+ns];ns--;for(var m=1;m<n;m++){for(var i=0;i<n-m;i++){var ho=xs[offset+i]-x;var hp=xs[offset+i+m]-x;var w=c[i+1]-d[i];var den=ho-hp;if(den==0){throw new Error("Unable to interpolate polynomial. Two numbers in n were identical (to within roundoff)")}den=w/den;d[i]=hp*den;c[i]=ho*den}dy=2*(ns+1)<n-m?c[ns+1]:d[ns--];y+=dy}return{y:y,dy:dy}};function Polynomial(){this.init(arguments)}Polynomial.prototype.init=function(coefs){this.coefs=new Array;for(var i=coefs.length-1;i>=0;i--)this.coefs.push(coefs[i]);this._variable="t";this._s=0};Polynomial.prototype.eval=function(x){if(isNaN(x)){throw new Error("Polynomial.eval: parameter must be a number")}var result=0;for(var i=this.coefs.length-1;i>=0;i--){result=result*x+this.coefs[i]}return result};Polynomial.prototype.add=function(that){var result=new Polynomial;var d1=this.getDegree();var d2=that.getDegree();var dmax=Math.max(d1,d2);for(var i=0;i<=dmax;i++){var v1=i<=d1?this.coefs[i]:0;var v2=i<=d2?that.coefs[i]:0;result.coefs[i]=v1+v2}return result};Polynomial.prototype.multiply=function(that){var result=new Polynomial;for(var i=0;i<=this.getDegree()+that.getDegree();i++){result.coefs.push(0)}for(var i=0;i<=this.getDegree();i++){for(var j=0;j<=that.getDegree();j++){result.coefs[i+j]+=this.coefs[i]*that.coefs[j]}}return result};Polynomial.prototype.divide_scalar=function(scalar){for(var i=0;i<this.coefs.length;i++){this.coefs[i]/=scalar}};Polynomial.prototype.simplify=function(TOLERANCE){if(TOLERANCE===undefined)TOLERANCE=1e-12;for(var i=this.getDegree();i>=0;i--){if(Math.abs(this.coefs[i])<=TOLERANCE){this.coefs.pop()}else{break}}};Polynomial.prototype.bisection=function(min,max){var minValue=this.eval(min);var maxValue=this.eval(max);var result;if(Math.abs(minValue)<=Polynomial.TOLERANCE){result=min}else if(Math.abs(maxValue)<=Polynomial.TOLERANCE){result=max}else if(minValue*maxValue<=0){var tmp1=Math.log(max-min);var tmp2=Math.LN10*Polynomial.ACCURACY;var iters=Math.ceil((tmp1+tmp2)/Math.LN2);for(var i=0;i<iters;i++){result=.5*(min+max);var value=this.eval(result);if(Math.abs(value)<=Polynomial.TOLERANCE){break}if(value*minValue<0){max=result;maxValue=value}else{min=result;minValue=value}}}return result};Polynomial.prototype.toString=function(){var coefs=new Array;var signs=new Array;for(var i=this.coefs.length-1;i>=0;i--){var value=Math.round(this.coefs[i]*1e3)/1e3;if(value!=0){var sign=value<0?" - ":" + ";value=Math.abs(value);if(i>0){if(value==1){value=this._variable}else{value+=this._variable}}if(i>1){value+="^"+i}signs.push(sign);coefs.push(value)}}signs[0]=signs[0]==" + "?"":"-";var result="";for(var i=0;i<coefs.length;i++){result+=signs[i]+coefs[i]}return result};Polynomial.prototype.trapezoid=function(min,max,n){if(isNaN(min)||isNaN(max)||isNaN(n)){throw new Error("Polynomial.trapezoid: parameters must be numbers")}var range=max-min;var TOLERANCE=1e-7;if(n==1){var minValue=this.eval(min);var maxValue=this.eval(max);this._s=.5*range*(minValue+maxValue)}else{var it=1<<n-2;var delta=range/it;var x=min+.5*delta;var sum=0;for(var i=0;i<it;i++){sum+=this.eval(x);x+=delta}this._s=.5*(this._s+range*sum/it)}if(isNaN(this._s)){throw new Error("Polynomial.trapezoid: this._s is NaN")}return this._s};Polynomial.prototype.simpson=function(min,max){if(isNaN(min)||isNaN(max)){throw new Error("Polynomial.simpson: parameters must be numbers")}var range=max-min;var st=.5*range*(this.eval(min)+this.eval(max));var t=st;var s=4*st/3;var os=s;var ost=st;var TOLERANCE=1e-7;var it=1;for(var n=2;n<=20;n++){var delta=range/it;var x=min+.5*delta;var sum=0;for(var i=1;i<=it;i++){sum+=this.eval(x);x+=delta}t=.5*(t+range*sum/it);st=t;s=(4*st-ost)/3;if(Math.abs(s-os)<TOLERANCE*Math.abs(os)){break}os=s;ost=st;it<<=1}return s};Polynomial.prototype.romberg=function(min,max){if(isNaN(min)||isNaN(max)){throw new Error("Polynomial.romberg: parameters must be numbers")}var MAX=20;var K=3;var TOLERANCE=1e-6;var s=new Array(MAX+1);var h=new Array(MAX+1);var result={y:0,dy:0};h[0]=1;for(var j=1;j<=MAX;j++){s[j-1]=this.trapezoid(min,max,j);if(j>=K){result=Polynomial.interpolate(h,s,K,j-K,0);if(Math.abs(result.dy)<=TOLERANCE*result.y)break}s[j]=s[j-1];h[j]=.25*h[j-1]}return result.y};Polynomial.prototype.getDegree=function(){return this.coefs.length-1};Polynomial.prototype.getDerivative=function(){var derivative=new Polynomial;for(var i=1;i<this.coefs.length;i++){derivative.coefs.push(i*this.coefs[i])}return derivative};Polynomial.prototype.getRoots=function(){var result;this.simplify();switch(this.getDegree()){case 0:result=[];break;case 1:result=this.getLinearRoot();break;case 2:result=this.getQuadraticRoots();break;case 3:result=this.getCubicRoots();break;case 4:result=this.getQuarticRoots();break;default:result=[]}return result};Polynomial.prototype.getRootsInInterval=function(min,max){var roots=new Array;var root;if(this.getDegree()==1){root=this.bisection(min,max);if(root!=null){roots.push(root)}}else{var deriv=this.getDerivative();var droots=deriv.getRootsInInterval(min,max);if(droots.length>0){root=this.bisection(min,droots[0]);if(root!=null){roots.push(root)}for(i=0;i<=droots.length-2;i++){root=this.bisection(droots[i],droots[i+1]);if(root!=null){roots.push(root)}}root=this.bisection(droots[droots.length-1],max);if(root!=null){roots.push(root)}}else{root=this.bisection(min,max);if(root!=null){roots.push(root)}}}return roots};Polynomial.prototype.getLinearRoot=function(){var result=[];var a=this.coefs[1];if(a!=0){result.push(-this.coefs[0]/a)}return result};Polynomial.prototype.getQuadraticRoots=function(){var results=[];if(this.getDegree()==2){var a=this.coefs[2];var b=this.coefs[1]/a;var c=this.coefs[0]/a;var d=b*b-4*c;if(d>0){var e=Math.sqrt(d);results.push(.5*(-b+e));results.push(.5*(-b-e))}else if(d==0){results.push(.5*-b)}}return results};Polynomial.prototype.getCubicRoots=function(){var results=[];if(this.getDegree()==3){var c3=this.coefs[3];var c2=this.coefs[2]/c3;var c1=this.coefs[1]/c3;var c0=this.coefs[0]/c3;var a=(3*c1-c2*c2)/3;var b=(2*c2*c2*c2-9*c1*c2+27*c0)/27;var offset=c2/3;var discrim=b*b/4+a*a*a/27;var halfB=b/2;var ZEROepsilon=this.zeroErrorEstimate();if(Math.abs(discrim)<=ZEROepsilon){discrim=0}if(discrim>0){var e=Math.sqrt(discrim);var tmp;var root;tmp=-halfB+e;if(tmp>=0){root=Math.pow(tmp,1/3)}else{root=-Math.pow(-tmp,1/3)}tmp=-halfB-e;if(tmp>=0){root+=Math.pow(tmp,1/3)}else{root-=Math.pow(-tmp,1/3)}results.push(root-offset)}else if(discrim<0){var distance=Math.sqrt(-a/3);var angle=Math.atan2(Math.sqrt(-discrim),-halfB)/3;var cos=Math.cos(angle);var sin=Math.sin(angle);var sqrt3=Math.sqrt(3);results.push(2*distance*cos-offset);results.push(-distance*(cos+sqrt3*sin)-offset);results.push(-distance*(cos-sqrt3*sin)-offset)}else{var tmp;if(halfB>=0){tmp=-Math.pow(halfB,1/3)}else{tmp=Math.pow(-halfB,1/3)}results.push(2*tmp-offset);results.push(-tmp-offset)}}return results};var sign=function(x){return typeof x==="number"?x?x<0?-1:1:x===x?x:NaN:NaN};Polynomial.prototype.getQuarticRoots=function(){var results=[];var n=this.getDegree();if(n==4){var poly=new Polynomial;poly.coefs=this.coefs.slice();poly.divide_scalar(poly.coefs[n]);var ERRF=1e-15;if(Math.abs(poly.coefs[0])<10*ERRF*Math.abs(poly.coefs[3])){poly.coefs[0]=0}var poly_d=poly.getDerivative();var derrt=poly_d.getRoots().sort(function(a,b){return a-b});var dery=[];var nr=derrt.length-1;var i;var rb=this.bounds();maxabsX=Math.max(Math.abs(rb.minX),Math.abs(rb.maxX));var ZEROepsilon=this.zeroErrorEstimate(maxabsX);for(i=0;i<=nr;i++){dery.push(poly.eval(derrt[i]))}for(i=0;i<=nr;i++){if(Math.abs(dery[i])<ZEROepsilon){dery[i]=0}}i=0;var dx=Math.max(.1*(rb.maxX-rb.minX)/n,ERRF);var guesses=[];var minmax=[];if(nr>-1){if(dery[0]!=0){if(sign(dery[0])!=sign(poly.eval(derrt[0]-dx)-dery[0])){guesses.push(derrt[0]-dx);minmax.push([rb.minX,derrt[0]])}}else{results.push(derrt[0],derrt[0]);i++}for(;i<nr;i++){if(dery[i+1]==0){results.push(derrt[i+1],derrt[i+1]);i++}else if(sign(dery[i])!=sign(dery[i+1])){guesses.push((derrt[i]+derrt[i+1])/2);minmax.push([derrt[i],derrt[i+1]])}}if(dery[nr]!=0&&sign(dery[nr])!=sign(poly.eval(derrt[nr]+dx)-dery[nr])){guesses.push(derrt[nr]+dx);minmax.push([derrt[nr],rb.maxX])}}var f=function(x){return poly.eval(x)};var df=function(x){return poly_d.eval(x)};if(guesses.length>0){for(i=0;i<guesses.length;i++){guesses[i]=Polynomial.newton_secant_bisection(guesses[i],f,df,32,minmax[i][0],minmax[i][1])}}results=results.concat(guesses)}return results};Polynomial.prototype.zeroErrorEstimate=function(maxabsX){var poly=this;var ERRF=1e-15;if(typeof maxabsX==="undefined"){var rb=poly.bounds();maxabsX=Math.max(Math.abs(rb.minX),Math.abs(rb.maxX))}if(maxabsX<.001){return 2*Math.abs(poly.eval(ERRF))}var n=poly.coefs.length-1;var an=poly.coefs[n];return 10*ERRF*poly.coefs.reduce(function(m,v,i){var nm=v/an*Math.pow(maxabsX,i);return nm>m?nm:m},0)};Polynomial.prototype.bounds_UpperReal_Fujiwara=function(){var a=this.coefs;var n=a.length-1;var an=a[n];if(an!=1){a=this.coefs.map(function(v){return v/an})}var b=a.map(function(v,i){return i<n?Math.pow(Math.abs(i==0?v/2:v),1/(n-i)):v});var coefSelectionFunc;var find2Max=function(acc,bi,i){if(coefSelectionFunc(i)){if(acc.max<bi){acc.nearmax=acc.max;acc.max=bi}else if(acc.nearmax<bi){acc.nearmax=bi}}return acc};coefSelectionFunc=function(i){return i<n&&a[i]<0};var max_nearmax_pos=b.reduce(find2Max,{max:0,nearmax:0});coefSelectionFunc=function(i){return i<n&&(n%2==i%2?a[i]<0:a[i]>0)};var max_nearmax_neg=b.reduce(find2Max,{max:0,nearmax:0});return{negX:-2*max_nearmax_neg.max,posX:2*max_nearmax_pos.max}};Polynomial.prototype.bounds_LowerReal_Fujiwara=function(){var poly=new Polynomial;poly.coefs=this.coefs.slice().reverse();var res=poly.bounds_UpperReal_Fujiwara();res.negX=1/res.negX;res.posX=1/res.posX;return res};Polynomial.prototype.bounds=function(){var urb=this.bounds_UpperReal_Fujiwara();var rb={minX:urb.negX,maxX:urb.posX};if(urb.negX===0&&urb.posX===0){return rb}if(urb.negX===0){rb.minX=this.bounds_LowerReal_Fujiwara().posX}else if(urb.posX===0){rb.maxX=this.bounds_LowerReal_Fujiwara().negX}if(rb.minX>rb.maxX){rb.minX=rb.maxX=0}return rb};Polynomial.newton_secant_bisection=function(x0,f,df,max_iterations,min,max){var x,prev_dfx=0,dfx,prev_x_ef_correction=0,x_correction,x_new;var v,y_atmin,y_atmax;x=x0;var ACCURACY=14;var min_correction_factor=Math.pow(10,-ACCURACY);var isBounded=typeof min==="number"&&typeof max==="number";if(isBounded){if(min>max){throw new Error("newton root finding: min must be greater than max")}y_atmin=f(min);y_atmax=f(max);if(sign(y_atmin)==sign(y_atmax)){throw new Error("newton root finding: y values of bounds must be of opposite sign")}}var isEnoughCorrection=function(){return Math.abs(x_correction)<=min_correction_factor*Math.abs(x)||prev_x_ef_correction==x-x_correction-x};var i;for(i=0;i<max_iterations;i++){dfx=df(x);if(dfx==0){if(prev_dfx==0){throw new Error("newton root finding: df(x) is zero")}else{dfx=prev_dfx}}prev_dfx=dfx;y=f(x);x_correction=y/dfx;x_new=x-x_correction;if(isEnoughCorrection()){break}if(isBounded){if(sign(y)==sign(y_atmax)){max=x;y_atmax=y}else if(sign(y)==sign(y_atmin)){min=x;y_atmin=y}else{x=x_new;break}if(x_new<min||x_new>max){if(sign(y_atmin)==sign(y_atmax)){break}var RATIO_LIMIT=50;var AIMED_BISECT_OFFSET=.25;var dy=y_atmax-y_atmin;var dx=max-min;if(dy==0){x_correction=x-(min+dx*.5)}else if(Math.abs(dy/Math.min(y_atmin,y_atmax))>RATIO_LIMIT){x_correction=x-(min+dx*(.5+(Math.abs(y_atmin)<Math.abs(y_atmax)?-AIMED_BISECT_OFFSET:AIMED_BISECT_OFFSET)))}else{x_correction=x-(min-y_atmin/dy*dx)}x_new=x-x_correction;if(isEnoughCorrection()){break}}}prev_x_ef_correction=x-x_new;x=x_new}return x};if(typeof module!=="undefined"){module.exports=Polynomial}},{}],13:[function(require,module,exports){if(typeof module!=="undefined"){var Polynomial=require("./Polynomial")}SqrtPolynomial.VERSION=1;SqrtPolynomial.prototype=new Polynomial;SqrtPolynomial.prototype.constructor=SqrtPolynomial;SqrtPolynomial.superclass=Polynomial.prototype;function SqrtPolynomial(){this.init(arguments)}SqrtPolynomial.prototype.eval=function(x){var TOLERANCE=1e-7;var result=SqrtPolynomial.superclass.eval.call(this,x);if(Math.abs(result)<TOLERANCE)result=0;if(result<0)throw new Error("SqrtPolynomial.eval: cannot take square root of negative number");return Math.sqrt(result)};SqrtPolynomial.prototype.toString=function(){var result=SqrtPolynomial.superclass.toString.call(this);return"sqrt("+result+")"};if(typeof module!=="undefined"){module.exports=SqrtPolynomial}},{"./Polynomial":12}]},{},[1])(1)});
