// This provides symbolic names for the octal modes used by git trees.
var modes = require('js-git/lib/modes');

// Create a repo by creating a plain object.
// var repo = {};

var mixins = {};

// <autogenerated>
__INSERT_MIXINS_REQUIRES_HERE__
// </autogenerated>

function popCallbackFromArgs(args) {
  var maybeCallback = args[args.length-1];
  var hasCallback = typeof maybeCallback === "function";
  if (hasCallback) args.pop();
  return hasCallback ? maybeCallback : null;
}

function makePromise(object, methodName) {
  var wrapped = object[methodName];
  // convert repo callback-style functions into promise producers
  object[methodName] = function() {
    var args = []; for (var i = 0; i < arguments.length; i++) args.push(arguments[i]);
    var maybeCallback = popCallbackFromArgs(args);
    return new Promise((resolve, reject) => {
      args.push((err, result) => {
        try {
          if (typeof maybeCallback === "function")
            maybeCallback(err, result);
        } catch(err2) { err = err2; }
        err ? reject(err) : resolve(result);
      });
      return wrapped.apply(object, args);
    });
  };
  object[methodName].toString = () => wrapped.toString();
}

function createRepo() {
  var repo = {};
  // <autogenerated>
  __INSERT_MIXINS_REPO_CALLS_HERE__
  // </autogenerated>
  return promisify(repo);
}

function promisify(repo) {
  Object.keys(repo).forEach(name => {
    if (typeof repo[name] === "function") makePromise(repo, name);
  });
  if (typeof repo.logWalk === "function") {
    var realLogWalk = repo.logWalk;
    repo.logWalk = function (ref, callback) {
      var args = []; for (var i = 0; i < arguments.length; i++) args.push(arguments[i]);
      return realLogWalk.apply(repo, args).then(walk => {
        if (walk.read) makePromise(walk, "read");
        return walk;
      });
    }
  }
  if (typeof repo.treeWalk === "function") {
    var realTreeWalk = repo.treeWalk;
    repo.treeWalk = function(ref, callback) {
      var args = []; for (var i = 0; i < arguments.length; i++) args.push(arguments[i]);
      return realTreeWalk.apply(repo, args).then(walk => {
        if (walk.read) makePromise(walk, "read");
        return walk;
      });
    }
  }
  return repo;
}

module.exports = {
  modes: modes,
  mixins: mixins,
  promisify: promisify,
  createRepo: createRepo,
  codec: require('js-git/lib/object-codec.js'),
  bodec:  require('bodec'),
  gitHubRequest: require('js-github/lib/xhr.js'),
  inflate: require('js-git/lib/inflate.js')
}
